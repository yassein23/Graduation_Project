
Graduation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000376  00800060  000033c2  00003456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008003d6  008003d6  000037cc  2**0
                  ALLOC
  3 .stab         000027f0  00000000  00000000  000037cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001826  00000000  00000000  00005fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000077e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007982  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b305  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c992  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 ed       	ldi	r26, 0xD6	; 214
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3d       	cpi	r26, 0xD8	; 216
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <main>
      8a:	0c 94 df 19 	jmp	0x33be	; 0x33be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ee       	ldi	r26, 0xED	; 237
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ee       	ldi	r24, 0xED	; 237
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d ee       	ldi	r22, 0xED	; 237
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 50       	subi	r30, 0x0B	; 11
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <PWM_Start>:
#include "../DIO/DIO_priv.h"
#include "../DIO/DIO_register.h"
#include <string.h>

void PWM_Start(uint8 mode,uint8 clk)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <PWM_Start+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	6a 83       	std	Y+2, r22	; 0x02

	//DDRB=DDRB|(1<<3);		// Set OC0 As a Output >> PB3
	SET_BIT_VALUE(DDRB,3);    /*VAL |= (1<<BIT)*/
     e3c:	a7 e3       	ldi	r26, 0x37	; 55
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e7 e3       	ldi	r30, 0x37	; 55
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 60       	ori	r24, 0x08	; 8
     e48:	8c 93       	st	X, r24

	/*	set mode	*/

	TCCR0 |= mode;			// Set Mode Of PWM
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	90 81       	ld	r25, Z
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	89 2b       	or	r24, r25
     e58:	8c 93       	st	X, r24

	/*	set Clk Source	*/

	TCCR0 |= clk ;			// Set Clk Source from 0 >> 1024 Prescaler
     e5a:	a3 e5       	ldi	r26, 0x53	; 83
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e3 e5       	ldi	r30, 0x53	; 83
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	90 81       	ld	r25, Z
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	89 2b       	or	r24, r25
     e68:	8c 93       	st	X, r24

}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <PWM_SetDuty>:

void PWM_SetDuty(uint8 duty)
{
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01

	// Set DutyCycle

	OCR0 = ((f32)duty/100)*(Timer0Top);		// Set DutyCycle from 0 % >> 100 % "(0>>255)"
     e84:	0c e5       	ldi	r16, 0x5C	; 92
     e86:	10 e0       	ldi	r17, 0x00	; 0
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a0 e0       	ldi	r26, 0x00	; 0
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	48 ec       	ldi	r20, 0xC8	; 200
     ea8:	52 e4       	ldi	r21, 0x42	; 66
     eaa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	4f e7       	ldi	r20, 0x7F	; 127
     ebc:	53 e4       	ldi	r21, 0x43	; 67
     ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	bc 01       	movw	r22, r24
     ec8:	cd 01       	movw	r24, r26
     eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	f8 01       	movw	r30, r16
     ed4:	80 83       	st	Z, r24

}
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <Time2String>:



/* Function That Convert time float value to String */
 void Time2String(f32 data)
{
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	cb 57       	subi	r28, 0x7B	; 123
     ef0:	d0 40       	sbci	r29, 0x00	; 0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	fe 01       	movw	r30, r28
     efe:	e8 58       	subi	r30, 0x88	; 136
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	60 83       	st	Z, r22
     f04:	71 83       	std	Z+1, r23	; 0x01
     f06:	82 83       	std	Z+2, r24	; 0x02
     f08:	93 83       	std	Z+3, r25	; 0x03

	int cnt=0;
     f0a:	1c 82       	std	Y+4, r1	; 0x04
     f0c:	1b 82       	std	Y+3, r1	; 0x03
     f0e:	1c c0       	rjmp	.+56     	; 0xf48 <Time2String+0x66>
	char d[10];
	while( data <1)
	{

		data=data *10;
     f10:	8e 01       	movw	r16, r28
     f12:	08 58       	subi	r16, 0x88	; 136
     f14:	1f 4f       	sbci	r17, 0xFF	; 255
     f16:	fe 01       	movw	r30, r28
     f18:	e8 58       	subi	r30, 0x88	; 136
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e2       	ldi	r20, 0x20	; 32
     f2a:	51 e4       	ldi	r21, 0x41	; 65
     f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	f8 01       	movw	r30, r16
     f36:	80 83       	st	Z, r24
     f38:	91 83       	std	Z+1, r25	; 0x01
     f3a:	a2 83       	std	Z+2, r26	; 0x02
     f3c:	b3 83       	std	Z+3, r27	; 0x03
		cnt++;
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	9c 83       	std	Y+4, r25	; 0x04
     f46:	8b 83       	std	Y+3, r24	; 0x03
 void Time2String(f32 data)
{

	int cnt=0;
	char d[10];
	while( data <1)
     f48:	fe 01       	movw	r30, r28
     f4a:	e8 58       	subi	r30, 0x88	; 136
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e8       	ldi	r20, 0x80	; 128
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f62:	88 23       	and	r24, r24
     f64:	ac f2       	brlt	.-86     	; 0xf10 <Time2String+0x2e>
	{

		data=data *10;
		cnt++;
	}
	data=data*10;
     f66:	8e 01       	movw	r16, r28
     f68:	08 58       	subi	r16, 0x88	; 136
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	fe 01       	movw	r30, r28
     f6e:	e8 58       	subi	r30, 0x88	; 136
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	60 81       	ld	r22, Z
     f74:	71 81       	ldd	r23, Z+1	; 0x01
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e2       	ldi	r20, 0x20	; 32
     f80:	51 e4       	ldi	r21, 0x41	; 65
     f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	f8 01       	movw	r30, r16
     f8c:	80 83       	st	Z, r24
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	a2 83       	std	Z+2, r26	; 0x02
     f92:	b3 83       	std	Z+3, r27	; 0x03
	ltoa(data,d,10);
     f94:	fe 01       	movw	r30, r28
     f96:	e8 58       	subi	r30, 0x88	; 136
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	60 81       	ld	r22, Z
     f9c:	71 81       	ldd	r23, Z+1	; 0x01
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9e 01       	movw	r18, r28
     fac:	2b 5f       	subi	r18, 0xFB	; 251
     fae:	3f 4f       	sbci	r19, 0xFF	; 255
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	a9 01       	movw	r20, r18
     fb6:	2a e0       	ldi	r18, 0x0A	; 10
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <ltoa>
	char ti[100]="";
     fbe:	1f 86       	std	Y+15, r1	; 0x0f
     fc0:	18 8a       	std	Y+16, r1	; 0x10
     fc2:	19 8a       	std	Y+17, r1	; 0x11
     fc4:	1a 8a       	std	Y+18, r1	; 0x12
     fc6:	80 e6       	ldi	r24, 0x60	; 96
     fc8:	fe 01       	movw	r30, r28
     fca:	73 96       	adiw	r30, 0x13	; 19
     fcc:	df 01       	movw	r26, r30
     fce:	98 2f       	mov	r25, r24
     fd0:	1d 92       	st	X+, r1
     fd2:	9a 95       	dec	r25
     fd4:	e9 f7       	brne	.-6      	; 0xfd0 <Time2String+0xee>
	char sec[5]="ms";
     fd6:	fe 01       	movw	r30, r28
     fd8:	ed 58       	subi	r30, 0x8D	; 141
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	8d e6       	ldi	r24, 0x6D	; 109
     fde:	93 e7       	ldi	r25, 0x73	; 115
     fe0:	a0 e0       	ldi	r26, 0x00	; 0
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	80 83       	st	Z, r24
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	a2 83       	std	Z+2, r26	; 0x02
     fea:	b3 83       	std	Z+3, r27	; 0x03
     fec:	14 82       	std	Z+4, r1	; 0x04
	strcat(ti,"0.");
     fee:	8e 01       	movw	r16, r28
     ff0:	01 5f       	subi	r16, 0xF1	; 241
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	ce 01       	movw	r24, r28
     ff6:	0f 96       	adiw	r24, 0x0f	; 15
     ff8:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <strlen>
     ffc:	80 0f       	add	r24, r16
     ffe:	91 1f       	adc	r25, r17
    1000:	20 e6       	ldi	r18, 0x60	; 96
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	b9 01       	movw	r22, r18
    1006:	43 e0       	ldi	r20, 0x03	; 3
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	0e 94 dd 16 	call	0x2dba	; 0x2dba <memcpy>
	for (int i = 0 ; i<(cnt-1);i++)
    100e:	1a 82       	std	Y+2, r1	; 0x02
    1010:	19 82       	std	Y+1, r1	; 0x01
    1012:	15 c0       	rjmp	.+42     	; 0x103e <Time2String+0x15c>
	{
		strcat(ti,"0");
    1014:	8e 01       	movw	r16, r28
    1016:	01 5f       	subi	r16, 0xF1	; 241
    1018:	1f 4f       	sbci	r17, 0xFF	; 255
    101a:	ce 01       	movw	r24, r28
    101c:	0f 96       	adiw	r24, 0x0f	; 15
    101e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <strlen>
    1022:	80 0f       	add	r24, r16
    1024:	91 1f       	adc	r25, r17
    1026:	23 e6       	ldi	r18, 0x63	; 99
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	b9 01       	movw	r22, r18
    102c:	42 e0       	ldi	r20, 0x02	; 2
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	0e 94 dd 16 	call	0x2dba	; 0x2dba <memcpy>
	data=data*10;
	ltoa(data,d,10);
	char ti[100]="";
	char sec[5]="ms";
	strcat(ti,"0.");
	for (int i = 0 ; i<(cnt-1);i++)
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	9c 01       	movw	r18, r24
    1044:	21 50       	subi	r18, 0x01	; 1
    1046:	30 40       	sbci	r19, 0x00	; 0
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	82 17       	cp	r24, r18
    104e:	93 07       	cpc	r25, r19
    1050:	0c f3       	brlt	.-62     	; 0x1014 <Time2String+0x132>
	{
		strcat(ti,"0");
	}
	strcat(ti,d);
    1052:	ce 01       	movw	r24, r28
    1054:	0f 96       	adiw	r24, 0x0f	; 15
    1056:	9e 01       	movw	r18, r28
    1058:	2b 5f       	subi	r18, 0xFB	; 251
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	b9 01       	movw	r22, r18
    105e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <strcat>

	//strcat(ti,A);
	strcat(ti,sec);
    1062:	ce 01       	movw	r24, r28
    1064:	0f 96       	adiw	r24, 0x0f	; 15
    1066:	9e 01       	movw	r18, r28
    1068:	2d 58       	subi	r18, 0x8D	; 141
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	b9 01       	movw	r22, r18
    106e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <strcat>
	GLCD_String(4,ti,Left);
    1072:	9e 01       	movw	r18, r28
    1074:	21 5f       	subi	r18, 0xF1	; 241
    1076:	3f 4f       	sbci	r19, 0xFF	; 255
    1078:	84 e0       	ldi	r24, 0x04	; 4
    107a:	b9 01       	movw	r22, r18
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GLCD_String>

}
    1082:	c5 58       	subi	r28, 0x85	; 133
    1084:	df 4f       	sbci	r29, 0xFF	; 255
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <ICU_GetPWM>:



/* Function That get all PWM parameter duty,frequency and period time */
void ICU_GetPWM(void)
{
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	c3 5a       	subi	r28, 0xA3	; 163
    10ac:	d0 40       	sbci	r29, 0x00	; 0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
	unsigned int A,B,C,Ton,T;;
	char duty_cycle[7]={0};
    10b8:	87 e0       	ldi	r24, 0x07	; 7
    10ba:	fe 01       	movw	r30, r28
    10bc:	b1 96       	adiw	r30, 0x21	; 33
    10be:	df 01       	movw	r26, r30
    10c0:	48 2f       	mov	r20, r24
    10c2:	1d 92       	st	X+, r1
    10c4:	4a 95       	dec	r20
    10c6:	e9 f7       	brne	.-6      	; 0x10c2 <ICU_GetPWM+0x28>
	char frequency[14]={0};
    10c8:	8e e0       	ldi	r24, 0x0E	; 14
    10ca:	fe 01       	movw	r30, r28
    10cc:	b8 96       	adiw	r30, 0x28	; 40
    10ce:	df 01       	movw	r26, r30
    10d0:	48 2f       	mov	r20, r24
    10d2:	1d 92       	st	X+, r1
    10d4:	4a 95       	dec	r20
    10d6:	e9 f7       	brne	.-6      	; 0x10d2 <ICU_GetPWM+0x38>

		TCCR1A = 0;
    10d8:	ef e4       	ldi	r30, 0x4F	; 79
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	10 82       	st	Z, r1
		TCNT1=0;
    10de:	ec e4       	ldi	r30, 0x4C	; 76
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	11 82       	std	Z+1, r1	; 0x01
    10e4:	10 82       	st	Z, r1
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
    10e6:	e8 e5       	ldi	r30, 0x58	; 88
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 e2       	ldi	r24, 0x20	; 32
    10ec:	80 83       	st	Z, r24

		TCCR1B = 0xC1;  	/* Rising edge, no prescaler ,Noise cansceld */
    10ee:	ee e4       	ldi	r30, 0x4E	; 78
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	81 ec       	ldi	r24, 0xC1	; 193
    10f4:	80 83       	st	Z, r24
		while ((TIFR&(1<<ICF1)) == 0);
    10f6:	e8 e5       	ldi	r30, 0x58	; 88
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	80 72       	andi	r24, 0x20	; 32
    1102:	90 70       	andi	r25, 0x00	; 0
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	b9 f3       	breq	.-18     	; 0x10f6 <ICU_GetPWM+0x5c>
		A = ICR1;  		/* Take value of capture register */
    1108:	e6 e4       	ldi	r30, 0x46	; 70
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	91 81       	ldd	r25, Z+1	; 0x01
    1110:	98 a3       	std	Y+32, r25	; 0x20
    1112:	8f 8f       	std	Y+31, r24	; 0x1f
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
    1114:	e8 e5       	ldi	r30, 0x58	; 88
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 e2       	ldi	r24, 0x20	; 32
    111a:	80 83       	st	Z, r24

		TCCR1B = 0xC1;  	/* Falling edge, no prescaler Noise cansceld */
    111c:	ee e4       	ldi	r30, 0x4E	; 78
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	81 ec       	ldi	r24, 0xC1	; 193
    1122:	80 83       	st	Z, r24
		while ((TIFR&(1<<ICF1)) == 0);
    1124:	e8 e5       	ldi	r30, 0x58	; 88
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	80 72       	andi	r24, 0x20	; 32
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	b9 f3       	breq	.-18     	; 0x1124 <ICU_GetPWM+0x8a>
		B = ICR1;  		/* Take value of capture register */
    1136:	e6 e4       	ldi	r30, 0x46	; 70
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	91 81       	ldd	r25, Z+1	; 0x01
    113e:	9e 8f       	std	Y+30, r25	; 0x1e
    1140:	8d 8f       	std	Y+29, r24	; 0x1d
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
    1142:	e8 e5       	ldi	r30, 0x58	; 88
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 e2       	ldi	r24, 0x20	; 32
    1148:	80 83       	st	Z, r24

		TCCR1B = 0x81;  	/* Rising edge, no prescaler Noise cansceld */
    114a:	ee e4       	ldi	r30, 0x4E	; 78
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	81 e8       	ldi	r24, 0x81	; 129
    1150:	80 83       	st	Z, r24
		while ((TIFR&(1<<ICF1)) == 0);
    1152:	e8 e5       	ldi	r30, 0x58	; 88
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	80 72       	andi	r24, 0x20	; 32
    115e:	90 70       	andi	r25, 0x00	; 0
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	b9 f3       	breq	.-18     	; 0x1152 <ICU_GetPWM+0xb8>
		C = ICR1;  		/* Take value of capture register */
    1164:	e6 e4       	ldi	r30, 0x46	; 70
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	91 81       	ldd	r25, Z+1	; 0x01
    116c:	9c 8f       	std	Y+28, r25	; 0x1c
    116e:	8b 8f       	std	Y+27, r24	; 0x1b
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
    1170:	e8 e5       	ldi	r30, 0x58	; 88
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 e2       	ldi	r24, 0x20	; 32
    1176:	80 83       	st	Z, r24

		TCCR1B = 0;  		/* Stop the timer */
    1178:	ee e4       	ldi	r30, 0x4E	; 78
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	10 82       	st	Z, r1

		if(A<B && B<C)  	/* Check for valid condition,
    117e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1180:	38 a1       	ldd	r19, Y+32	; 0x20
    1182:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1184:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1186:	28 17       	cp	r18, r24
    1188:	39 07       	cpc	r19, r25
    118a:	08 f0       	brcs	.+2      	; 0x118e <ICU_GetPWM+0xf4>
    118c:	44 c1       	rjmp	.+648    	; 0x1416 <ICU_GetPWM+0x37c>
    118e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1190:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1192:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1194:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1196:	28 17       	cp	r18, r24
    1198:	39 07       	cpc	r19, r25
    119a:	08 f0       	brcs	.+2      	; 0x119e <ICU_GetPWM+0x104>
    119c:	3c c1       	rjmp	.+632    	; 0x1416 <ICU_GetPWM+0x37c>
					to avoid timer overflow reading */
		{
			Ton=C-B;
    119e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    11a0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    11a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11a6:	d9 01       	movw	r26, r18
    11a8:	a8 1b       	sub	r26, r24
    11aa:	b9 0b       	sbc	r27, r25
    11ac:	cd 01       	movw	r24, r26
    11ae:	9a 8f       	std	Y+26, r25	; 0x1a
    11b0:	89 8f       	std	Y+25, r24	; 0x19
			T=B-A;
    11b2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    11b4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    11b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11b8:	98 a1       	ldd	r25, Y+32	; 0x20
    11ba:	f9 01       	movw	r30, r18
    11bc:	e8 1b       	sub	r30, r24
    11be:	f9 0b       	sbc	r31, r25
    11c0:	cf 01       	movw	r24, r30
    11c2:	98 8f       	std	Y+24, r25	; 0x18
    11c4:	8f 8b       	std	Y+23, r24	; 0x17


			/* Calculate frequency */
			uint32 freq= F_CPU/T;
    11c6:	8f 89       	ldd	r24, Y+23	; 0x17
    11c8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ca:	9c 01       	movw	r18, r24
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	94 e2       	ldi	r25, 0x24	; 36
    11d4:	a4 ef       	ldi	r26, 0xF4	; 244
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	bc 01       	movw	r22, r24
    11da:	cd 01       	movw	r24, r26
    11dc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__udivmodsi4>
    11e0:	da 01       	movw	r26, r20
    11e2:	c9 01       	movw	r24, r18
    11e4:	8b 8b       	std	Y+19, r24	; 0x13
    11e6:	9c 8b       	std	Y+20, r25	; 0x14
    11e8:	ad 8b       	std	Y+21, r26	; 0x15
    11ea:	be 8b       	std	Y+22, r27	; 0x16
			freq=freq/1000;
    11ec:	8b 89       	ldd	r24, Y+19	; 0x13
    11ee:	9c 89       	ldd	r25, Y+20	; 0x14
    11f0:	ad 89       	ldd	r26, Y+21	; 0x15
    11f2:	be 89       	ldd	r27, Y+22	; 0x16
    11f4:	28 ee       	ldi	r18, 0xE8	; 232
    11f6:	33 e0       	ldi	r19, 0x03	; 3
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__udivmodsi4>
    1204:	da 01       	movw	r26, r20
    1206:	c9 01       	movw	r24, r18
    1208:	8b 8b       	std	Y+19, r24	; 0x13
    120a:	9c 8b       	std	Y+20, r25	; 0x14
    120c:	ad 8b       	std	Y+21, r26	; 0x15
    120e:	be 8b       	std	Y+22, r27	; 0x16

			/* Calculate duty cycle */
			duty =((float) Ton /(float)T)*100;
    1210:	89 8d       	ldd	r24, Y+25	; 0x19
    1212:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1214:	cc 01       	movw	r24, r24
    1216:	a0 e0       	ldi	r26, 0x00	; 0
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1222:	7b 01       	movw	r14, r22
    1224:	8c 01       	movw	r16, r24
    1226:	8f 89       	ldd	r24, Y+23	; 0x17
    1228:	98 8d       	ldd	r25, Y+24	; 0x18
    122a:	cc 01       	movw	r24, r24
    122c:	a0 e0       	ldi	r26, 0x00	; 0
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	bc 01       	movw	r22, r24
    1232:	cd 01       	movw	r24, r26
    1234:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1238:	9b 01       	movw	r18, r22
    123a:	ac 01       	movw	r20, r24
    123c:	c8 01       	movw	r24, r16
    123e:	b7 01       	movw	r22, r14
    1240:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	48 ec       	ldi	r20, 0xC8	; 200
    1252:	52 e4       	ldi	r21, 0x42	; 66
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	90 93 d7 03 	sts	0x03D7, r25
    126c:	80 93 d6 03 	sts	0x03D6, r24

			/* Calculate Time */
			f32 time =(1/(f32)freq);
    1270:	6b 89       	ldd	r22, Y+19	; 0x13
    1272:	7c 89       	ldd	r23, Y+20	; 0x14
    1274:	8d 89       	ldd	r24, Y+21	; 0x15
    1276:	9e 89       	ldd	r25, Y+22	; 0x16
    1278:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    127c:	9b 01       	movw	r18, r22
    127e:	ac 01       	movw	r20, r24
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	80 e8       	ldi	r24, 0x80	; 128
    1286:	9f e3       	ldi	r25, 0x3F	; 63
    1288:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	8f 87       	std	Y+15, r24	; 0x0f
    1292:	98 8b       	std	Y+16, r25	; 0x10
    1294:	a9 8b       	std	Y+17, r26	; 0x11
    1296:	ba 8b       	std	Y+18, r27	; 0x12

			/* Display frequency */
			ltoa(freq,frequency,10);
    1298:	8b 89       	ldd	r24, Y+19	; 0x13
    129a:	9c 89       	ldd	r25, Y+20	; 0x14
    129c:	ad 89       	ldd	r26, Y+21	; 0x15
    129e:	be 89       	ldd	r27, Y+22	; 0x16
    12a0:	9e 01       	movw	r18, r28
    12a2:	28 5d       	subi	r18, 0xD8	; 216
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	a9 01       	movw	r20, r18
    12ac:	2a e0       	ldi	r18, 0x0A	; 10
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <ltoa>
			char fr[100]="Freq:";
    12b4:	ae 01       	movw	r20, r28
    12b6:	45 5c       	subi	r20, 0xC5	; 197
    12b8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ba:	c1 56       	subi	r28, 0x61	; 97
    12bc:	df 4f       	sbci	r29, 0xFF	; 255
    12be:	59 83       	std	Y+1, r21	; 0x01
    12c0:	48 83       	st	Y, r20
    12c2:	cf 59       	subi	r28, 0x9F	; 159
    12c4:	d0 40       	sbci	r29, 0x00	; 0
    12c6:	81 e8       	ldi	r24, 0x81	; 129
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	cf 55       	subi	r28, 0x5F	; 95
    12cc:	df 4f       	sbci	r29, 0xFF	; 255
    12ce:	99 83       	std	Y+1, r25	; 0x01
    12d0:	88 83       	st	Y, r24
    12d2:	c1 5a       	subi	r28, 0xA1	; 161
    12d4:	d0 40       	sbci	r29, 0x00	; 0
    12d6:	96 e0       	ldi	r25, 0x06	; 6
    12d8:	cd 55       	subi	r28, 0x5D	; 93
    12da:	df 4f       	sbci	r29, 0xFF	; 255
    12dc:	98 83       	st	Y, r25
    12de:	c3 5a       	subi	r28, 0xA3	; 163
    12e0:	d0 40       	sbci	r29, 0x00	; 0
    12e2:	cf 55       	subi	r28, 0x5F	; 95
    12e4:	df 4f       	sbci	r29, 0xFF	; 255
    12e6:	a8 81       	ld	r26, Y
    12e8:	b9 81       	ldd	r27, Y+1	; 0x01
    12ea:	c1 5a       	subi	r28, 0xA1	; 161
    12ec:	d0 40       	sbci	r29, 0x00	; 0
    12ee:	0c 90       	ld	r0, X
    12f0:	cf 55       	subi	r28, 0x5F	; 95
    12f2:	df 4f       	sbci	r29, 0xFF	; 255
    12f4:	e8 81       	ld	r30, Y
    12f6:	f9 81       	ldd	r31, Y+1	; 0x01
    12f8:	c1 5a       	subi	r28, 0xA1	; 161
    12fa:	d0 40       	sbci	r29, 0x00	; 0
    12fc:	31 96       	adiw	r30, 0x01	; 1
    12fe:	cf 55       	subi	r28, 0x5F	; 95
    1300:	df 4f       	sbci	r29, 0xFF	; 255
    1302:	f9 83       	std	Y+1, r31	; 0x01
    1304:	e8 83       	st	Y, r30
    1306:	c1 5a       	subi	r28, 0xA1	; 161
    1308:	d0 40       	sbci	r29, 0x00	; 0
    130a:	c1 56       	subi	r28, 0x61	; 97
    130c:	df 4f       	sbci	r29, 0xFF	; 255
    130e:	a8 81       	ld	r26, Y
    1310:	b9 81       	ldd	r27, Y+1	; 0x01
    1312:	cf 59       	subi	r28, 0x9F	; 159
    1314:	d0 40       	sbci	r29, 0x00	; 0
    1316:	0c 92       	st	X, r0
    1318:	c1 56       	subi	r28, 0x61	; 97
    131a:	df 4f       	sbci	r29, 0xFF	; 255
    131c:	e8 81       	ld	r30, Y
    131e:	f9 81       	ldd	r31, Y+1	; 0x01
    1320:	cf 59       	subi	r28, 0x9F	; 159
    1322:	d0 40       	sbci	r29, 0x00	; 0
    1324:	31 96       	adiw	r30, 0x01	; 1
    1326:	c1 56       	subi	r28, 0x61	; 97
    1328:	df 4f       	sbci	r29, 0xFF	; 255
    132a:	f9 83       	std	Y+1, r31	; 0x01
    132c:	e8 83       	st	Y, r30
    132e:	cf 59       	subi	r28, 0x9F	; 159
    1330:	d0 40       	sbci	r29, 0x00	; 0
    1332:	cd 55       	subi	r28, 0x5D	; 93
    1334:	df 4f       	sbci	r29, 0xFF	; 255
    1336:	f8 81       	ld	r31, Y
    1338:	c3 5a       	subi	r28, 0xA3	; 163
    133a:	d0 40       	sbci	r29, 0x00	; 0
    133c:	f1 50       	subi	r31, 0x01	; 1
    133e:	cd 55       	subi	r28, 0x5D	; 93
    1340:	df 4f       	sbci	r29, 0xFF	; 255
    1342:	f8 83       	st	Y, r31
    1344:	c3 5a       	subi	r28, 0xA3	; 163
    1346:	d0 40       	sbci	r29, 0x00	; 0
    1348:	cd 55       	subi	r28, 0x5D	; 93
    134a:	df 4f       	sbci	r29, 0xFF	; 255
    134c:	48 81       	ld	r20, Y
    134e:	c3 5a       	subi	r28, 0xA3	; 163
    1350:	d0 40       	sbci	r29, 0x00	; 0
    1352:	44 23       	and	r20, r20
    1354:	31 f6       	brne	.-116    	; 0x12e2 <ICU_GetPWM+0x248>
    1356:	8e e5       	ldi	r24, 0x5E	; 94
    1358:	fe 01       	movw	r30, r28
    135a:	ef 5b       	subi	r30, 0xBF	; 191
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	df 01       	movw	r26, r30
    1360:	48 2f       	mov	r20, r24
    1362:	1d 92       	st	X+, r1
    1364:	4a 95       	dec	r20
    1366:	e9 f7       	brne	.-6      	; 0x1362 <ICU_GetPWM+0x2c8>
			char hz[5]="Khz";
    1368:	8b e4       	ldi	r24, 0x4B	; 75
    136a:	98 e6       	ldi	r25, 0x68	; 104
    136c:	aa e7       	ldi	r26, 0x7A	; 122
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	8e ab       	std	Y+54, r24	; 0x36
    1372:	9f ab       	std	Y+55, r25	; 0x37
    1374:	a8 af       	std	Y+56, r26	; 0x38
    1376:	b9 af       	std	Y+57, r27	; 0x39
    1378:	1a ae       	std	Y+58, r1	; 0x3a
			strcat(fr,frequency);
    137a:	ce 01       	movw	r24, r28
    137c:	cb 96       	adiw	r24, 0x3b	; 59
    137e:	9e 01       	movw	r18, r28
    1380:	28 5d       	subi	r18, 0xD8	; 216
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	b9 01       	movw	r22, r18
    1386:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <strcat>
			strcat(fr,hz);
    138a:	ce 01       	movw	r24, r28
    138c:	cb 96       	adiw	r24, 0x3b	; 59
    138e:	9e 01       	movw	r18, r28
    1390:	2a 5c       	subi	r18, 0xCA	; 202
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	b9 01       	movw	r22, r18
    1396:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <strcat>
			GLCD_String(1,fr,Left);
    139a:	9e 01       	movw	r18, r28
    139c:	25 5c       	subi	r18, 0xC5	; 197
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	b9 01       	movw	r22, r18
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GLCD_String>
			/* Display Duty */
			sprintf(duty_cycle,"   Duty:%d",duty);
    13aa:	20 91 d6 03 	lds	r18, 0x03D6
    13ae:	30 91 d7 03 	lds	r19, 0x03D7
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <ICU_GetPWM+0x31a>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <ICU_GetPWM+0x31c>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <ICU_GetPWM+0x31e>
    13b8:	ed b7       	in	r30, 0x3d	; 61
    13ba:	fe b7       	in	r31, 0x3e	; 62
    13bc:	31 96       	adiw	r30, 0x01	; 1
    13be:	ce 01       	movw	r24, r28
    13c0:	81 96       	adiw	r24, 0x21	; 33
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
    13c6:	85 e6       	ldi	r24, 0x65	; 101
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	93 83       	std	Z+3, r25	; 0x03
    13cc:	82 83       	std	Z+2, r24	; 0x02
    13ce:	35 83       	std	Z+5, r19	; 0x05
    13d0:	24 83       	std	Z+4, r18	; 0x04
    13d2:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <sprintf>
    13d6:	8d b7       	in	r24, 0x3d	; 61
    13d8:	9e b7       	in	r25, 0x3e	; 62
    13da:	06 96       	adiw	r24, 0x06	; 6
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	9e bf       	out	0x3e, r25	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	8d bf       	out	0x3d, r24	; 61
			strcat(duty_cycle,"%");
    13e6:	ce 01       	movw	r24, r28
    13e8:	81 96       	adiw	r24, 0x21	; 33
    13ea:	20 e7       	ldi	r18, 0x70	; 112
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <strcat>
			GLCD_String(1,duty_cycle,Right);
    13f4:	9e 01       	movw	r18, r28
    13f6:	2f 5d       	subi	r18, 0xDF	; 223
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	b9 01       	movw	r22, r18
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GLCD_String>

			/* Display Time */
			Time2String(time);
    1404:	8f 85       	ldd	r24, Y+15	; 0x0f
    1406:	98 89       	ldd	r25, Y+16	; 0x10
    1408:	a9 89       	ldd	r26, Y+17	; 0x11
    140a:	ba 89       	ldd	r27, Y+18	; 0x12
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 71 07 	call	0xee2	; 0xee2 <Time2String>
    1414:	09 c0       	rjmp	.+18     	; 0x1428 <ICU_GetPWM+0x38e>

		}

		else
		{
			GLCD_ClearAll();
    1416:	0e 94 27 12 	call	0x244e	; 0x244e <GLCD_ClearAll>
			GLCD_String(1,"OUT OF RANGE!!",Left);
    141a:	22 e7       	ldi	r18, 0x72	; 114
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	b9 01       	movw	r22, r18
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GLCD_String>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a8 e4       	ldi	r26, 0x48	; 72
    142e:	b2 e4       	ldi	r27, 0x42	; 66
    1430:	8b 87       	std	Y+11, r24	; 0x0b
    1432:	9c 87       	std	Y+12, r25	; 0x0c
    1434:	ad 87       	std	Y+13, r26	; 0x0d
    1436:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1438:	6b 85       	ldd	r22, Y+11	; 0x0b
    143a:	7c 85       	ldd	r23, Y+12	; 0x0c
    143c:	8d 85       	ldd	r24, Y+13	; 0x0d
    143e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	4a e7       	ldi	r20, 0x7A	; 122
    1446:	55 e4       	ldi	r21, 0x45	; 69
    1448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	8f 83       	std	Y+7, r24	; 0x07
    1452:	98 87       	std	Y+8, r25	; 0x08
    1454:	a9 87       	std	Y+9, r26	; 0x09
    1456:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1458:	6f 81       	ldd	r22, Y+7	; 0x07
    145a:	78 85       	ldd	r23, Y+8	; 0x08
    145c:	89 85       	ldd	r24, Y+9	; 0x09
    145e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e8       	ldi	r20, 0x80	; 128
    1466:	5f e3       	ldi	r21, 0x3F	; 63
    1468:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    146c:	88 23       	and	r24, r24
    146e:	2c f4       	brge	.+10     	; 0x147a <ICU_GetPWM+0x3e0>
		__ticks = 1;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 83       	std	Y+5, r24	; 0x05
    1478:	3f c0       	rjmp	.+126    	; 0x14f8 <ICU_GetPWM+0x45e>
	else if (__tmp > 65535)
    147a:	6f 81       	ldd	r22, Y+7	; 0x07
    147c:	78 85       	ldd	r23, Y+8	; 0x08
    147e:	89 85       	ldd	r24, Y+9	; 0x09
    1480:	9a 85       	ldd	r25, Y+10	; 0x0a
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	3f ef       	ldi	r19, 0xFF	; 255
    1486:	4f e7       	ldi	r20, 0x7F	; 127
    1488:	57 e4       	ldi	r21, 0x47	; 71
    148a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    148e:	18 16       	cp	r1, r24
    1490:	4c f5       	brge	.+82     	; 0x14e4 <ICU_GetPWM+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1492:	6b 85       	ldd	r22, Y+11	; 0x0b
    1494:	7c 85       	ldd	r23, Y+12	; 0x0c
    1496:	8d 85       	ldd	r24, Y+13	; 0x0d
    1498:	9e 85       	ldd	r25, Y+14	; 0x0e
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e2       	ldi	r20, 0x20	; 32
    14a0:	51 e4       	ldi	r21, 0x41	; 65
    14a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	9e 83       	std	Y+6, r25	; 0x06
    14b8:	8d 83       	std	Y+5, r24	; 0x05
    14ba:	0f c0       	rjmp	.+30     	; 0x14da <ICU_GetPWM+0x440>
    14bc:	80 e9       	ldi	r24, 0x90	; 144
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	9c 83       	std	Y+4, r25	; 0x04
    14c2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <ICU_GetPWM+0x42e>
    14cc:	9c 83       	std	Y+4, r25	; 0x04
    14ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	9e 83       	std	Y+6, r25	; 0x06
    14d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	69 f7       	brne	.-38     	; 0x14bc <ICU_GetPWM+0x422>
    14e2:	14 c0       	rjmp	.+40     	; 0x150c <ICU_GetPWM+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e4:	6f 81       	ldd	r22, Y+7	; 0x07
    14e6:	78 85       	ldd	r23, Y+8	; 0x08
    14e8:	89 85       	ldd	r24, Y+9	; 0x09
    14ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	9e 83       	std	Y+6, r25	; 0x06
    14f6:	8d 83       	std	Y+5, r24	; 0x05
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	9a 83       	std	Y+2, r25	; 0x02
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <ICU_GetPWM+0x46a>
    1508:	9a 83       	std	Y+2, r25	; 0x02
    150a:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(50);

}
    150c:	cd 55       	subi	r28, 0x5D	; 93
    150e:	df 4f       	sbci	r29, 0xFF	; 255
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	08 95       	ret

00001528 <DIO_enuInit>:
//#include "DIO_interface.h"



ES_T DIO_enuInit(void)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	0f 92       	push	r0
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enu_ErrorState= ES_NOT_OK ;
    1532:	19 82       	std	Y+1, r1	; 0x01
//	0bPA7PA6PA5PA4PA3PA2PA1PA0
	DDRA=0x01;
    1534:	ea e3       	ldi	r30, 0x3A	; 58
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 83       	st	Z, r24
	PORTA=0x01;
    153c:	eb e3       	ldi	r30, 0x3B	; 59
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	80 83       	st	Z, r24

	//DDRA=CONC(DIO_u8PA7_DIR,DIO_u8PA6_DIR,DIO_u8PA5_DIR,DIO_u8PA4_DIR,DIO_u8PA3_DIR,DIO_u8PA2_DIR,DIO_u8PA1_DIR,DIO_u8PA0_DIR);

//PORTA=CONC(DIO_u8PA7_VALUE,DIO_u8PA6_VALUE,DIO_u8PA5_VALUE,DIO_u8PA4_VALUE,DIO_u8PA3_VALUE,DIO_u8PA2_VALUE,DIO_u8PA1_VALUE,DIO_u8PA0_VALUE);

    return Local_enu_ErrorState;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
}
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <DIO_enuSetPinDirection>:

ES_T DIO_enuSetPinDirection(uint8 copy_u8PortID , uint8 copy_u8PinID , uint8 copy_u8Direction)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	28 97       	sbiw	r28, 0x08	; 8
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	6b 83       	std	Y+3, r22	; 0x03
    1566:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enu_ErrorState= ES_NOT_OK ;
    1568:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8PinID<=DIO_u8PIN7)
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	88 30       	cpi	r24, 0x08	; 8
    156e:	08 f0       	brcs	.+2      	; 0x1572 <DIO_enuSetPinDirection+0x24>
    1570:	f3 c0       	rjmp	.+486    	; 0x1758 <DIO_enuSetPinDirection+0x20a>
	{
       if(copy_u8Direction == DIO_u8PIN_INPUT)
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	88 23       	and	r24, r24
    1576:	09 f0       	breq	.+2      	; 0x157a <DIO_enuSetPinDirection+0x2c>
    1578:	77 c0       	rjmp	.+238    	; 0x1668 <DIO_enuSetPinDirection+0x11a>
       {
    	   switch(copy_u8PortID)
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	38 87       	std	Y+8, r19	; 0x08
    1582:	2f 83       	std	Y+7, r18	; 0x07
    1584:	8f 81       	ldd	r24, Y+7	; 0x07
    1586:	98 85       	ldd	r25, Y+8	; 0x08
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	91 05       	cpc	r25, r1
    158c:	59 f1       	breq	.+86     	; 0x15e4 <DIO_enuSetPinDirection+0x96>
    158e:	2f 81       	ldd	r18, Y+7	; 0x07
    1590:	38 85       	ldd	r19, Y+8	; 0x08
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	2c f4       	brge	.+10     	; 0x15a2 <DIO_enuSetPinDirection+0x54>
    1598:	8f 81       	ldd	r24, Y+7	; 0x07
    159a:	98 85       	ldd	r25, Y+8	; 0x08
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	69 f0       	breq	.+26     	; 0x15ba <DIO_enuSetPinDirection+0x6c>
    15a0:	60 c0       	rjmp	.+192    	; 0x1662 <DIO_enuSetPinDirection+0x114>
    15a2:	2f 81       	ldd	r18, Y+7	; 0x07
    15a4:	38 85       	ldd	r19, Y+8	; 0x08
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	89 f1       	breq	.+98     	; 0x160e <DIO_enuSetPinDirection+0xc0>
    15ac:	8f 81       	ldd	r24, Y+7	; 0x07
    15ae:	98 85       	ldd	r25, Y+8	; 0x08
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	91 05       	cpc	r25, r1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <DIO_enuSetPinDirection+0x6a>
    15b6:	40 c0       	rjmp	.+128    	; 0x1638 <DIO_enuSetPinDirection+0xea>
    15b8:	54 c0       	rjmp	.+168    	; 0x1662 <DIO_enuSetPinDirection+0x114>
    	   {
    	   case DIO_u8PORTA :
    		   DDRA &=~(1<<copy_u8PinID);
    15ba:	aa e3       	ldi	r26, 0x3A	; 58
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	ea e3       	ldi	r30, 0x3A	; 58
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <DIO_enuSetPinDirection+0x8a>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <DIO_enuSetPinDirection+0x86>
    15dc:	80 95       	com	r24
    15de:	84 23       	and	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	bc c0       	rjmp	.+376    	; 0x175c <DIO_enuSetPinDirection+0x20e>
    		  // CLEAR_BIT_VALUE(DDRA,copy_u8PinID);
    	           break;
    	   case DIO_u8PORTB : CLEAR_BIT_VALUE(DDRB,copy_u8PinID);
    15e4:	a7 e3       	ldi	r26, 0x37	; 55
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e7 e3       	ldi	r30, 0x37	; 55
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_enuSetPinDirection+0xb4>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <DIO_enuSetPinDirection+0xb0>
    1606:	80 95       	com	r24
    1608:	84 23       	and	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	a7 c0       	rjmp	.+334    	; 0x175c <DIO_enuSetPinDirection+0x20e>
    	      	   break;
    	   case DIO_u8PORTC : CLEAR_BIT_VALUE(DDRC,copy_u8PinID);
    160e:	a4 e3       	ldi	r26, 0x34	; 52
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e4 e3       	ldi	r30, 0x34	; 52
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <DIO_enuSetPinDirection+0xde>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <DIO_enuSetPinDirection+0xda>
    1630:	80 95       	com	r24
    1632:	84 23       	and	r24, r20
    1634:	8c 93       	st	X, r24
    1636:	92 c0       	rjmp	.+292    	; 0x175c <DIO_enuSetPinDirection+0x20e>
    	      	   break;
    	   case DIO_u8PORTD : CLEAR_BIT_VALUE(DDRD,copy_u8PinID);
    1638:	a1 e3       	ldi	r26, 0x31	; 49
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e1 e3       	ldi	r30, 0x31	; 49
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_enuSetPinDirection+0x108>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_enuSetPinDirection+0x104>
    165a:	80 95       	com	r24
    165c:	84 23       	and	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	7d c0       	rjmp	.+250    	; 0x175c <DIO_enuSetPinDirection+0x20e>
    	      	   break;
    	   default :Local_enu_ErrorState= ES_OUT_OF_RANGE;
    1662:	83 e0       	ldi	r24, 0x03	; 3
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	7a c0       	rjmp	.+244    	; 0x175c <DIO_enuSetPinDirection+0x20e>
    	           break;
    	   }
       }
       else if (copy_u8Direction== DIO_u8OUTPUT)
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	09 f0       	breq	.+2      	; 0x1670 <DIO_enuSetPinDirection+0x122>
    166e:	72 c0       	rjmp	.+228    	; 0x1754 <DIO_enuSetPinDirection+0x206>
       {
    	  switch(copy_u8PortID)
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	3e 83       	std	Y+6, r19	; 0x06
    1678:	2d 83       	std	Y+5, r18	; 0x05
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	91 05       	cpc	r25, r1
    1682:	49 f1       	breq	.+82     	; 0x16d6 <DIO_enuSetPinDirection+0x188>
    1684:	2d 81       	ldd	r18, Y+5	; 0x05
    1686:	3e 81       	ldd	r19, Y+6	; 0x06
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	2c f4       	brge	.+10     	; 0x1698 <DIO_enuSetPinDirection+0x14a>
    168e:	8d 81       	ldd	r24, Y+5	; 0x05
    1690:	9e 81       	ldd	r25, Y+6	; 0x06
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	61 f0       	breq	.+24     	; 0x16ae <DIO_enuSetPinDirection+0x160>
    1696:	5b c0       	rjmp	.+182    	; 0x174e <DIO_enuSetPinDirection+0x200>
    1698:	2d 81       	ldd	r18, Y+5	; 0x05
    169a:	3e 81       	ldd	r19, Y+6	; 0x06
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	71 f1       	breq	.+92     	; 0x16fe <DIO_enuSetPinDirection+0x1b0>
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	83 30       	cpi	r24, 0x03	; 3
    16a8:	91 05       	cpc	r25, r1
    16aa:	e9 f1       	breq	.+122    	; 0x1726 <DIO_enuSetPinDirection+0x1d8>
    16ac:	50 c0       	rjmp	.+160    	; 0x174e <DIO_enuSetPinDirection+0x200>
    		      	   {
    	  case DIO_u8PORTA : SET_BIT_VALUE(DDRA,copy_u8PinID);
    16ae:	aa e3       	ldi	r26, 0x3A	; 58
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ea e3       	ldi	r30, 0x3A	; 58
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_enuSetPinDirection+0x17e>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_enuSetPinDirection+0x17a>
    16d0:	84 2b       	or	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	43 c0       	rjmp	.+134    	; 0x175c <DIO_enuSetPinDirection+0x20e>
    		       break;
    	  case DIO_u8PORTB : SET_BIT_VALUE(DDRB,copy_u8PinID);
    16d6:	a7 e3       	ldi	r26, 0x37	; 55
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e7 e3       	ldi	r30, 0x37	; 55
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_enuSetPinDirection+0x1a6>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_enuSetPinDirection+0x1a2>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	2f c0       	rjmp	.+94     	; 0x175c <DIO_enuSetPinDirection+0x20e>
    		       break;
    	  case DIO_u8PORTC : SET_BIT_VALUE(DDRC,copy_u8PinID);
    16fe:	a4 e3       	ldi	r26, 0x34	; 52
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e4 e3       	ldi	r30, 0x34	; 52
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_enuSetPinDirection+0x1ce>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_enuSetPinDirection+0x1ca>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	1b c0       	rjmp	.+54     	; 0x175c <DIO_enuSetPinDirection+0x20e>
    		   	   break;
          case DIO_u8PORTD : SET_BIT_VALUE(DDRD,copy_u8PinID);
    1726:	a1 e3       	ldi	r26, 0x31	; 49
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e1 e3       	ldi	r30, 0x31	; 49
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_enuSetPinDirection+0x1f6>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_enuSetPinDirection+0x1f2>
    1748:	84 2b       	or	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	07 c0       	rjmp	.+14     	; 0x175c <DIO_enuSetPinDirection+0x20e>
    		   	   break;
    	  default :Local_enu_ErrorState= ES_OUT_OF_RANGE;
    174e:	83 e0       	ldi	r24, 0x03	; 3
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	04 c0       	rjmp	.+8      	; 0x175c <DIO_enuSetPinDirection+0x20e>
		   }


            else
            {
            	Local_enu_ErrorState= ES_NOT_OK;
    1754:	19 82       	std	Y+1, r1	; 0x01
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_enuSetPinDirection+0x20e>
            }
	}

	else
	{
		Local_enu_ErrorState= ES_OUT_OF_RANGE;
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enu_ErrorState;
    175c:	89 81       	ldd	r24, Y+1	; 0x01
}
    175e:	28 96       	adiw	r28, 0x08	; 8
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <DIO_enuSetPinValue>:

ES_T DIO_enuSetPinValue (uint8 copy_u8PortID , uint8 copy_u8PinID , uint8 copy_u8Value)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	28 97       	sbiw	r28, 0x08	; 8
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	6b 83       	std	Y+3, r22	; 0x03
    1788:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enu_ErrorState= ES_NOT_OK ;
    178a:	19 82       	std	Y+1, r1	; 0x01
		if(copy_u8PinID<=DIO_u8PIN7)
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	88 30       	cpi	r24, 0x08	; 8
    1790:	08 f0       	brcs	.+2      	; 0x1794 <DIO_enuSetPinValue+0x24>
    1792:	f3 c0       	rjmp	.+486    	; 0x197a <DIO_enuSetPinValue+0x20a>
		{
	       if(copy_u8Value == DIO_u8PIN_LOW)
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	88 23       	and	r24, r24
    1798:	09 f0       	breq	.+2      	; 0x179c <DIO_enuSetPinValue+0x2c>
    179a:	77 c0       	rjmp	.+238    	; 0x188a <DIO_enuSetPinValue+0x11a>
	       {
	    	   switch(copy_u8PortID)
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	38 87       	std	Y+8, r19	; 0x08
    17a4:	2f 83       	std	Y+7, r18	; 0x07
    17a6:	8f 81       	ldd	r24, Y+7	; 0x07
    17a8:	98 85       	ldd	r25, Y+8	; 0x08
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	91 05       	cpc	r25, r1
    17ae:	59 f1       	breq	.+86     	; 0x1806 <DIO_enuSetPinValue+0x96>
    17b0:	2f 81       	ldd	r18, Y+7	; 0x07
    17b2:	38 85       	ldd	r19, Y+8	; 0x08
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <DIO_enuSetPinValue+0x54>
    17ba:	8f 81       	ldd	r24, Y+7	; 0x07
    17bc:	98 85       	ldd	r25, Y+8	; 0x08
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	69 f0       	breq	.+26     	; 0x17dc <DIO_enuSetPinValue+0x6c>
    17c2:	60 c0       	rjmp	.+192    	; 0x1884 <DIO_enuSetPinValue+0x114>
    17c4:	2f 81       	ldd	r18, Y+7	; 0x07
    17c6:	38 85       	ldd	r19, Y+8	; 0x08
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	31 05       	cpc	r19, r1
    17cc:	89 f1       	breq	.+98     	; 0x1830 <DIO_enuSetPinValue+0xc0>
    17ce:	8f 81       	ldd	r24, Y+7	; 0x07
    17d0:	98 85       	ldd	r25, Y+8	; 0x08
    17d2:	83 30       	cpi	r24, 0x03	; 3
    17d4:	91 05       	cpc	r25, r1
    17d6:	09 f4       	brne	.+2      	; 0x17da <DIO_enuSetPinValue+0x6a>
    17d8:	40 c0       	rjmp	.+128    	; 0x185a <DIO_enuSetPinValue+0xea>
    17da:	54 c0       	rjmp	.+168    	; 0x1884 <DIO_enuSetPinValue+0x114>
	    	   {
	    	   case DIO_u8PORTA : CLEAR_BIT_VALUE(PORTA,copy_u8PinID);
    17dc:	ab e3       	ldi	r26, 0x3B	; 59
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	eb e3       	ldi	r30, 0x3B	; 59
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_enuSetPinValue+0x8a>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_enuSetPinValue+0x86>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	bc c0       	rjmp	.+376    	; 0x197e <DIO_enuSetPinValue+0x20e>
	    	           break;
	    	   case DIO_u8PORTB : CLEAR_BIT_VALUE(PORTB,copy_u8PinID);
    1806:	a8 e3       	ldi	r26, 0x38	; 56
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e8 e3       	ldi	r30, 0x38	; 56
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <DIO_enuSetPinValue+0xb4>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <DIO_enuSetPinValue+0xb0>
    1828:	80 95       	com	r24
    182a:	84 23       	and	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	a7 c0       	rjmp	.+334    	; 0x197e <DIO_enuSetPinValue+0x20e>
	    	      	   break;
	    	   case DIO_u8PORTC : CLEAR_BIT_VALUE(PORTC,copy_u8PinID);
    1830:	a5 e3       	ldi	r26, 0x35	; 53
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e5 e3       	ldi	r30, 0x35	; 53
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_enuSetPinValue+0xde>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_enuSetPinValue+0xda>
    1852:	80 95       	com	r24
    1854:	84 23       	and	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	92 c0       	rjmp	.+292    	; 0x197e <DIO_enuSetPinValue+0x20e>
	    	      	   break;
	    	   case DIO_u8PORTD : CLEAR_BIT_VALUE(PORTD,copy_u8PinID);
    185a:	a2 e3       	ldi	r26, 0x32	; 50
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e2 e3       	ldi	r30, 0x32	; 50
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <DIO_enuSetPinValue+0x108>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <DIO_enuSetPinValue+0x104>
    187c:	80 95       	com	r24
    187e:	84 23       	and	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	7d c0       	rjmp	.+250    	; 0x197e <DIO_enuSetPinValue+0x20e>
	    	      	   break;
	    	   default :Local_enu_ErrorState= ES_OUT_OF_RANGE;
    1884:	83 e0       	ldi	r24, 0x03	; 3
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	7a c0       	rjmp	.+244    	; 0x197e <DIO_enuSetPinValue+0x20e>
	    	           break;
	    	   }
	       }
	    	   else if(copy_u8Value == DIO_u8PIN_HIGH)
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	09 f0       	breq	.+2      	; 0x1892 <DIO_enuSetPinValue+0x122>
    1890:	72 c0       	rjmp	.+228    	; 0x1976 <DIO_enuSetPinValue+0x206>
			   {
	    	  switch(copy_u8PortID)
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	3e 83       	std	Y+6, r19	; 0x06
    189a:	2d 83       	std	Y+5, r18	; 0x05
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	9e 81       	ldd	r25, Y+6	; 0x06
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	91 05       	cpc	r25, r1
    18a4:	49 f1       	breq	.+82     	; 0x18f8 <DIO_enuSetPinValue+0x188>
    18a6:	2d 81       	ldd	r18, Y+5	; 0x05
    18a8:	3e 81       	ldd	r19, Y+6	; 0x06
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	2c f4       	brge	.+10     	; 0x18ba <DIO_enuSetPinValue+0x14a>
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	61 f0       	breq	.+24     	; 0x18d0 <DIO_enuSetPinValue+0x160>
    18b8:	5b c0       	rjmp	.+182    	; 0x1970 <DIO_enuSetPinValue+0x200>
    18ba:	2d 81       	ldd	r18, Y+5	; 0x05
    18bc:	3e 81       	ldd	r19, Y+6	; 0x06
    18be:	22 30       	cpi	r18, 0x02	; 2
    18c0:	31 05       	cpc	r19, r1
    18c2:	71 f1       	breq	.+92     	; 0x1920 <DIO_enuSetPinValue+0x1b0>
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	9e 81       	ldd	r25, Y+6	; 0x06
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	91 05       	cpc	r25, r1
    18cc:	e9 f1       	breq	.+122    	; 0x1948 <DIO_enuSetPinValue+0x1d8>
    18ce:	50 c0       	rjmp	.+160    	; 0x1970 <DIO_enuSetPinValue+0x200>
	    		      	   {
	    	  case DIO_u8PORTA : SET_BIT_VALUE(PORTA,copy_u8PinID);
    18d0:	ab e3       	ldi	r26, 0x3B	; 59
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	eb e3       	ldi	r30, 0x3B	; 59
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_enuSetPinValue+0x17e>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_enuSetPinValue+0x17a>
    18f2:	84 2b       	or	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	43 c0       	rjmp	.+134    	; 0x197e <DIO_enuSetPinValue+0x20e>
	    		       break;
	    	  case DIO_u8PORTB : SET_BIT_VALUE(PORTB,copy_u8PinID);
    18f8:	a8 e3       	ldi	r26, 0x38	; 56
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e8 e3       	ldi	r30, 0x38	; 56
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_enuSetPinValue+0x1a6>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_enuSetPinValue+0x1a2>
    191a:	84 2b       	or	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	2f c0       	rjmp	.+94     	; 0x197e <DIO_enuSetPinValue+0x20e>
	    		       break;
	    	  case DIO_u8PORTC : SET_BIT_VALUE(PORTC,copy_u8PinID);
    1920:	a5 e3       	ldi	r26, 0x35	; 53
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e5 e3       	ldi	r30, 0x35	; 53
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_enuSetPinValue+0x1ce>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_enuSetPinValue+0x1ca>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	1b c0       	rjmp	.+54     	; 0x197e <DIO_enuSetPinValue+0x20e>
	    		   	   break;
	          case DIO_u8PORTD : SET_BIT_VALUE(PORTD,copy_u8PinID);
    1948:	a2 e3       	ldi	r26, 0x32	; 50
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e2 e3       	ldi	r30, 0x32	; 50
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_enuSetPinValue+0x1f6>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_enuSetPinValue+0x1f2>
    196a:	84 2b       	or	r24, r20
    196c:	8c 93       	st	X, r24
    196e:	07 c0       	rjmp	.+14     	; 0x197e <DIO_enuSetPinValue+0x20e>
	    		   	   break;
	    	  default :Local_enu_ErrorState= ES_OUT_OF_RANGE;
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	04 c0       	rjmp	.+8      	; 0x197e <DIO_enuSetPinValue+0x20e>
			   }


	            else
	            {
	            	Local_enu_ErrorState= ES_NOT_OK;
    1976:	19 82       	std	Y+1, r1	; 0x01
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_enuSetPinValue+0x20e>

	            }
		}
		else
		{
			Local_enu_ErrorState= ES_OUT_OF_RANGE;
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enu_ErrorState;
    197e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1980:	28 96       	adiw	r28, 0x08	; 8
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <DIO_enuTogglePinValue>:


ES_T DIO_enuTogglePinValue (uint8 copy_u8PortID , uint8 copy_u8PinID)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <DIO_enuTogglePinValue+0x6>
    1998:	00 d0       	rcall	.+0      	; 0x199a <DIO_enuTogglePinValue+0x8>
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	8a 83       	std	Y+2, r24	; 0x02
    19a2:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enu_ErrorState= ES_NOT_OK ;
    19a4:	19 82       	std	Y+1, r1	; 0x01
			if(copy_u8PinID<=DIO_u8PIN7)
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	88 30       	cpi	r24, 0x08	; 8
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <DIO_enuTogglePinValue+0x1c>
    19ac:	72 c0       	rjmp	.+228    	; 0x1a92 <DIO_enuTogglePinValue+0x100>
			{
		    	   switch(copy_u8PortID)
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	3d 83       	std	Y+5, r19	; 0x05
    19b6:	2c 83       	std	Y+4, r18	; 0x04
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	91 05       	cpc	r25, r1
    19c0:	49 f1       	breq	.+82     	; 0x1a14 <DIO_enuTogglePinValue+0x82>
    19c2:	2c 81       	ldd	r18, Y+4	; 0x04
    19c4:	3d 81       	ldd	r19, Y+5	; 0x05
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <DIO_enuTogglePinValue+0x44>
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	9d 81       	ldd	r25, Y+5	; 0x05
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	61 f0       	breq	.+24     	; 0x19ec <DIO_enuTogglePinValue+0x5a>
    19d4:	5b c0       	rjmp	.+182    	; 0x1a8c <DIO_enuTogglePinValue+0xfa>
    19d6:	2c 81       	ldd	r18, Y+4	; 0x04
    19d8:	3d 81       	ldd	r19, Y+5	; 0x05
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	71 f1       	breq	.+92     	; 0x1a3c <DIO_enuTogglePinValue+0xaa>
    19e0:	8c 81       	ldd	r24, Y+4	; 0x04
    19e2:	9d 81       	ldd	r25, Y+5	; 0x05
    19e4:	83 30       	cpi	r24, 0x03	; 3
    19e6:	91 05       	cpc	r25, r1
    19e8:	e9 f1       	breq	.+122    	; 0x1a64 <DIO_enuTogglePinValue+0xd2>
    19ea:	50 c0       	rjmp	.+160    	; 0x1a8c <DIO_enuTogglePinValue+0xfa>
		    	   {
		    	   case DIO_u8PORTA : TOGGLE_BIT_VALUE(PORTA,copy_u8PinID);
    19ec:	ab e3       	ldi	r26, 0x3B	; 59
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	eb e3       	ldi	r30, 0x3B	; 59
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <DIO_enuTogglePinValue+0x78>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <DIO_enuTogglePinValue+0x74>
    1a0e:	84 27       	eor	r24, r20
    1a10:	8c 93       	st	X, r24
    1a12:	41 c0       	rjmp	.+130    	; 0x1a96 <DIO_enuTogglePinValue+0x104>
		    	           break;
		    	   case DIO_u8PORTB : TOGGLE_BIT_VALUE(PORTB,copy_u8PinID);
    1a14:	a8 e3       	ldi	r26, 0x38	; 56
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e8 e3       	ldi	r30, 0x38	; 56
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <DIO_enuTogglePinValue+0xa0>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <DIO_enuTogglePinValue+0x9c>
    1a36:	84 27       	eor	r24, r20
    1a38:	8c 93       	st	X, r24
    1a3a:	2d c0       	rjmp	.+90     	; 0x1a96 <DIO_enuTogglePinValue+0x104>
		    	      	   break;
		    	   case DIO_u8PORTC : TOGGLE_BIT_VALUE(PORTC,copy_u8PinID);
    1a3c:	a5 e3       	ldi	r26, 0x35	; 53
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e5 e3       	ldi	r30, 0x35	; 53
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_enuTogglePinValue+0xc8>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <DIO_enuTogglePinValue+0xc4>
    1a5e:	84 27       	eor	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	19 c0       	rjmp	.+50     	; 0x1a96 <DIO_enuTogglePinValue+0x104>
		    	      	   break;
		    	   case DIO_u8PORTD : TOGGLE_BIT_VALUE(PORTD,copy_u8PinID);
    1a64:	a2 e3       	ldi	r26, 0x32	; 50
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e2 e3       	ldi	r30, 0x32	; 50
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	48 2f       	mov	r20, r24
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_enuTogglePinValue+0xf0>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_enuTogglePinValue+0xec>
    1a86:	84 27       	eor	r24, r20
    1a88:	8c 93       	st	X, r24
    1a8a:	05 c0       	rjmp	.+10     	; 0x1a96 <DIO_enuTogglePinValue+0x104>
		    	      	   break;
		    	   default :Local_enu_ErrorState= ES_OUT_OF_RANGE;
    1a8c:	83 e0       	ldi	r24, 0x03	; 3
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_enuTogglePinValue+0x104>

		       }

			else
			{
				Local_enu_ErrorState= ES_OUT_OF_RANGE;
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	89 83       	std	Y+1, r24	; 0x01
			}


			return Local_enu_ErrorState;
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <DIO_enuGetPinValue>:

ES_T DIO_enuGetPinValue(uint8 Copy_u8PortID , uint8 Copy_u8PinID , uint8 * Copy_pu8Value)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	27 97       	sbiw	r28, 0x07	; 7
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	8a 83       	std	Y+2, r24	; 0x02
    1abe:	6b 83       	std	Y+3, r22	; 0x03
    1ac0:	5d 83       	std	Y+5, r21	; 0x05
    1ac2:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOT_OK;
    1ac4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != 0)
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <DIO_enuGetPinValue+0x28>
    1ace:	7e c0       	rjmp	.+252    	; 0x1bcc <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8PortID <= DIO_u8GROUPD
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	84 30       	cpi	r24, 0x04	; 4
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <DIO_enuGetPinValue+0x30>
    1ad6:	77 c0       	rjmp	.+238    	; 0x1bc6 <DIO_enuGetPinValue+0x11e>
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	88 30       	cpi	r24, 0x08	; 8
    1adc:	08 f0       	brcs	.+2      	; 0x1ae0 <DIO_enuGetPinValue+0x38>
    1ade:	73 c0       	rjmp	.+230    	; 0x1bc6 <DIO_enuGetPinValue+0x11e>
				&& Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8PortID)
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	3f 83       	std	Y+7, r19	; 0x07
    1ae8:	2e 83       	std	Y+6, r18	; 0x06
    1aea:	4e 81       	ldd	r20, Y+6	; 0x06
    1aec:	5f 81       	ldd	r21, Y+7	; 0x07
    1aee:	41 30       	cpi	r20, 0x01	; 1
    1af0:	51 05       	cpc	r21, r1
    1af2:	59 f1       	breq	.+86     	; 0x1b4a <DIO_enuGetPinValue+0xa2>
    1af4:	8e 81       	ldd	r24, Y+6	; 0x06
    1af6:	9f 81       	ldd	r25, Y+7	; 0x07
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	91 05       	cpc	r25, r1
    1afc:	34 f4       	brge	.+12     	; 0x1b0a <DIO_enuGetPinValue+0x62>
    1afe:	2e 81       	ldd	r18, Y+6	; 0x06
    1b00:	3f 81       	ldd	r19, Y+7	; 0x07
    1b02:	21 15       	cp	r18, r1
    1b04:	31 05       	cpc	r19, r1
    1b06:	69 f0       	breq	.+26     	; 0x1b22 <DIO_enuGetPinValue+0x7a>
    1b08:	5b c0       	rjmp	.+182    	; 0x1bc0 <DIO_enuGetPinValue+0x118>
    1b0a:	4e 81       	ldd	r20, Y+6	; 0x06
    1b0c:	5f 81       	ldd	r21, Y+7	; 0x07
    1b0e:	42 30       	cpi	r20, 0x02	; 2
    1b10:	51 05       	cpc	r21, r1
    1b12:	79 f1       	breq	.+94     	; 0x1b72 <DIO_enuGetPinValue+0xca>
    1b14:	8e 81       	ldd	r24, Y+6	; 0x06
    1b16:	9f 81       	ldd	r25, Y+7	; 0x07
    1b18:	83 30       	cpi	r24, 0x03	; 3
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <DIO_enuGetPinValue+0x78>
    1b1e:	3d c0       	rjmp	.+122    	; 0x1b9a <DIO_enuGetPinValue+0xf2>
    1b20:	4f c0       	rjmp	.+158    	; 0x1bc0 <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8GROUPA:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    1b22:	e9 e3       	ldi	r30, 0x39	; 57
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a9 01       	movw	r20, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_enuGetPinValue+0x92>
    1b36:	55 95       	asr	r21
    1b38:	47 95       	ror	r20
    1b3a:	8a 95       	dec	r24
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_enuGetPinValue+0x8e>
    1b3e:	ca 01       	movw	r24, r20
    1b40:	81 70       	andi	r24, 0x01	; 1
    1b42:	ec 81       	ldd	r30, Y+4	; 0x04
    1b44:	fd 81       	ldd	r31, Y+5	; 0x05
    1b46:	80 83       	st	Z, r24
    1b48:	3b c0       	rjmp	.+118    	; 0x1bc0 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUPB:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    1b4a:	e6 e3       	ldi	r30, 0x36	; 54
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a9 01       	movw	r20, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_enuGetPinValue+0xba>
    1b5e:	55 95       	asr	r21
    1b60:	47 95       	ror	r20
    1b62:	8a 95       	dec	r24
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_enuGetPinValue+0xb6>
    1b66:	ca 01       	movw	r24, r20
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b6c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b6e:	80 83       	st	Z, r24
    1b70:	27 c0       	rjmp	.+78     	; 0x1bc0 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUPC:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    1b72:	e3 e3       	ldi	r30, 0x33	; 51
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a9 01       	movw	r20, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_enuGetPinValue+0xe2>
    1b86:	55 95       	asr	r21
    1b88:	47 95       	ror	r20
    1b8a:	8a 95       	dec	r24
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_enuGetPinValue+0xde>
    1b8e:	ca 01       	movw	r24, r20
    1b90:	81 70       	andi	r24, 0x01	; 1
    1b92:	ec 81       	ldd	r30, Y+4	; 0x04
    1b94:	fd 81       	ldd	r31, Y+5	; 0x05
    1b96:	80 83       	st	Z, r24
    1b98:	13 c0       	rjmp	.+38     	; 0x1bc0 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUPD:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    1b9a:	e0 e3       	ldi	r30, 0x30	; 48
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a9 01       	movw	r20, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_enuGetPinValue+0x10a>
    1bae:	55 95       	asr	r21
    1bb0:	47 95       	ror	r20
    1bb2:	8a 95       	dec	r24
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <DIO_enuGetPinValue+0x106>
    1bb6:	ca 01       	movw	r24, r20
    1bb8:	81 70       	andi	r24, 0x01	; 1
    1bba:	ec 81       	ldd	r30, Y+4	; 0x04
    1bbc:	fd 81       	ldd	r31, Y+5	; 0x05
    1bbe:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd2:	27 96       	adiw	r28, 0x07	; 7
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <DIO_enuSetPortDitection>:


ES_T DIO_enuSetPortDitection(uint8 copy_u8PortID , uint8 copy_u8Direction )
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <DIO_enuSetPortDitection+0x6>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enu_ErrorState= ES_NOT_OK ;
    1bf4:	19 82       	std	Y+1, r1	; 0x01



		return Local_enu_ErrorState;
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <DIO_enuSetPortValue>:

ES_T DIO_enuSetPortValue(uint8 copy_u8PortID , uint8 copy_u8Value)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <DIO_enuSetPortValue+0x6>
    1c0a:	0f 92       	push	r0
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	8a 83       	std	Y+2, r24	; 0x02
    1c12:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enu_ErrorState= ES_NOT_OK ;
    1c14:	19 82       	std	Y+1, r1	; 0x01



		return Local_enu_ErrorState;
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <DIO_enuGetPortValue>:

ES_T DIO_enuGetPortValue(uint8 copy_u8PortID , uint8 *copy_pu8Value)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <DIO_enuGetPortValue+0x6>
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <DIO_enuGetPortValue+0x8>
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	8a 83       	std	Y+2, r24	; 0x02
    1c32:	7c 83       	std	Y+4, r23	; 0x04
    1c34:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enu_ErrorState= ES_NOT_OK ;
    1c36:	19 82       	std	Y+1, r1	; 0x01



		return Local_enu_ErrorState;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <GLCD_Init>:




void GLCD_Init()			/* GLCD initialize function */
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	2e 97       	sbiw	r28, 0x0e	; 14
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
	Data_Port_Dir = 0xFF;
    1c5c:	ea e3       	ldi	r30, 0x3A	; 58
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	80 83       	st	Z, r24
	Command_Port_Dir = 0xFF;
    1c64:	e7 e3       	ldi	r30, 0x37	; 55
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	8f ef       	ldi	r24, 0xFF	; 255
    1c6a:	80 83       	st	Z, r24
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
    1c6c:	a8 e3       	ldi	r26, 0x38	; 56
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e8 e3       	ldi	r30, 0x38	; 56
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	80 67       	ori	r24, 0x70	; 112
    1c78:	8c 93       	st	X, r24
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a0 ea       	ldi	r26, 0xA0	; 160
    1c80:	b1 e4       	ldi	r27, 0x41	; 65
    1c82:	8b 87       	std	Y+11, r24	; 0x0b
    1c84:	9c 87       	std	Y+12, r25	; 0x0c
    1c86:	ad 87       	std	Y+13, r26	; 0x0d
    1c88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	4a e7       	ldi	r20, 0x7A	; 122
    1c98:	55 e4       	ldi	r21, 0x45	; 69
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	8f 83       	std	Y+7, r24	; 0x07
    1ca4:	98 87       	std	Y+8, r25	; 0x08
    1ca6:	a9 87       	std	Y+9, r26	; 0x09
    1ca8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e8       	ldi	r20, 0x80	; 128
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cbe:	88 23       	and	r24, r24
    1cc0:	2c f4       	brge	.+10     	; 0x1ccc <GLCD_Init+0x84>
		__ticks = 1;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	3f c0       	rjmp	.+126    	; 0x1d4a <GLCD_Init+0x102>
	else if (__tmp > 65535)
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	57 e4       	ldi	r21, 0x47	; 71
    1cdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce0:	18 16       	cp	r1, r24
    1ce2:	4c f5       	brge	.+82     	; 0x1d36 <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e2       	ldi	r20, 0x20	; 32
    1cf2:	51 e4       	ldi	r21, 0x41	; 65
    1cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	bc 01       	movw	r22, r24
    1cfe:	cd 01       	movw	r24, r26
    1d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	9e 83       	std	Y+6, r25	; 0x06
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <GLCD_Init+0xe4>
    1d0e:	80 e9       	ldi	r24, 0x90	; 144
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <GLCD_Init+0xd2>
    1d1e:	9c 83       	std	Y+4, r25	; 0x04
    1d20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	69 f7       	brne	.-38     	; 0x1d0e <GLCD_Init+0xc6>
    1d34:	14 c0       	rjmp	.+40     	; 0x1d5e <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d36:	6f 81       	ldd	r22, Y+7	; 0x07
    1d38:	78 85       	ldd	r23, Y+8	; 0x08
    1d3a:	89 85       	ldd	r24, Y+9	; 0x09
    1d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	9e 83       	std	Y+6, r25	; 0x06
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <GLCD_Init+0x10e>
    1d5a:	9a 83       	std	Y+2, r25	; 0x02
    1d5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
    1d5e:	8e e3       	ldi	r24, 0x3E	; 62
    1d60:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
    1d64:	80 e4       	ldi	r24, 0x40	; 64
    1d66:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
    1d6a:	88 eb       	ldi	r24, 0xB8	; 184
    1d6c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
    1d70:	80 ec       	ldi	r24, 0xC0	; 192
    1d72:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
    1d76:	8f e3       	ldi	r24, 0x3F	; 63
    1d78:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
}
    1d7c:	2e 96       	adiw	r28, 0x0e	; 14
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <GLCD_Command>:

void GLCD_Command(char Command)		/* GLCD command function */
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	e1 97       	sbiw	r28, 0x31	; 49
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Command;		/* Copy command on data pin */
    1da4:	eb e3       	ldi	r30, 0x3B	; 59
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	89 a9       	ldd	r24, Y+49	; 0x31
    1daa:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/
    1dac:	a8 e3       	ldi	r26, 0x38	; 56
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e8 e3       	ldi	r30, 0x38	; 56
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8b 7f       	andi	r24, 0xFB	; 251
    1db8:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
    1dba:	a8 e3       	ldi	r26, 0x38	; 56
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e8 e3       	ldi	r30, 0x38	; 56
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8d 7f       	andi	r24, 0xFD	; 253
    1dc6:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    1dc8:	a8 e3       	ldi	r26, 0x38	; 56
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e8 e3       	ldi	r30, 0x38	; 56
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	81 60       	ori	r24, 0x01	; 1
    1dd4:	8c 93       	st	X, r24
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 ea       	ldi	r26, 0xA0	; 160
    1ddc:	b0 e4       	ldi	r27, 0x40	; 64
    1dde:	8d a7       	std	Y+45, r24	; 0x2d
    1de0:	9e a7       	std	Y+46, r25	; 0x2e
    1de2:	af a7       	std	Y+47, r26	; 0x2f
    1de4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1de6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1de8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1dea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dec:	98 a9       	ldd	r25, Y+48	; 0x30
    1dee:	2b ea       	ldi	r18, 0xAB	; 171
    1df0:	3a ea       	ldi	r19, 0xAA	; 170
    1df2:	4a ea       	ldi	r20, 0xAA	; 170
    1df4:	50 e4       	ldi	r21, 0x40	; 64
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	89 a7       	std	Y+41, r24	; 0x29
    1e00:	9a a7       	std	Y+42, r25	; 0x2a
    1e02:	ab a7       	std	Y+43, r26	; 0x2b
    1e04:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e06:	69 a5       	ldd	r22, Y+41	; 0x29
    1e08:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	1c f4       	brge	.+6      	; 0x1e24 <GLCD_Command+0x96>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	88 a7       	std	Y+40, r24	; 0x28
    1e22:	91 c0       	rjmp	.+290    	; 0x1f46 <GLCD_Command+0x1b8>
	else if (__tmp > 255)
    1e24:	69 a5       	ldd	r22, Y+41	; 0x29
    1e26:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	53 e4       	ldi	r21, 0x43	; 67
    1e34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	0c f0       	brlt	.+2      	; 0x1e3e <GLCD_Command+0xb0>
    1e3c:	7b c0       	rjmp	.+246    	; 0x1f34 <GLCD_Command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1e3e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e40:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e44:	98 a9       	ldd	r25, Y+48	; 0x30
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a e7       	ldi	r20, 0x7A	; 122
    1e4c:	54 e4       	ldi	r21, 0x44	; 68
    1e4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8c a3       	std	Y+36, r24	; 0x24
    1e58:	9d a3       	std	Y+37, r25	; 0x25
    1e5a:	ae a3       	std	Y+38, r26	; 0x26
    1e5c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5e:	6c a1       	ldd	r22, Y+36	; 0x24
    1e60:	7d a1       	ldd	r23, Y+37	; 0x25
    1e62:	8e a1       	ldd	r24, Y+38	; 0x26
    1e64:	9f a1       	ldd	r25, Y+39	; 0x27
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4a e7       	ldi	r20, 0x7A	; 122
    1e6c:	55 e4       	ldi	r21, 0x45	; 69
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	88 a3       	std	Y+32, r24	; 0x20
    1e78:	99 a3       	std	Y+33, r25	; 0x21
    1e7a:	aa a3       	std	Y+34, r26	; 0x22
    1e7c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1e7e:	68 a1       	ldd	r22, Y+32	; 0x20
    1e80:	79 a1       	ldd	r23, Y+33	; 0x21
    1e82:	8a a1       	ldd	r24, Y+34	; 0x22
    1e84:	9b a1       	ldd	r25, Y+35	; 0x23
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e8       	ldi	r20, 0x80	; 128
    1e8c:	5f e3       	ldi	r21, 0x3F	; 63
    1e8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e92:	88 23       	and	r24, r24
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <GLCD_Command+0x112>
		__ticks = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9f 8f       	std	Y+31, r25	; 0x1f
    1e9c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e9e:	3f c0       	rjmp	.+126    	; 0x1f1e <GLCD_Command+0x190>
	else if (__tmp > 65535)
    1ea0:	68 a1       	ldd	r22, Y+32	; 0x20
    1ea2:	79 a1       	ldd	r23, Y+33	; 0x21
    1ea4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ea6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	3f ef       	ldi	r19, 0xFF	; 255
    1eac:	4f e7       	ldi	r20, 0x7F	; 127
    1eae:	57 e4       	ldi	r21, 0x47	; 71
    1eb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	4c f5       	brge	.+82     	; 0x1f0a <GLCD_Command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb8:	6c a1       	ldd	r22, Y+36	; 0x24
    1eba:	7d a1       	ldd	r23, Y+37	; 0x25
    1ebc:	8e a1       	ldd	r24, Y+38	; 0x26
    1ebe:	9f a1       	ldd	r25, Y+39	; 0x27
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e2       	ldi	r20, 0x20	; 32
    1ec6:	51 e4       	ldi	r21, 0x41	; 65
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9f 8f       	std	Y+31, r25	; 0x1f
    1ede:	8e 8f       	std	Y+30, r24	; 0x1e
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <GLCD_Command+0x172>
    1ee2:	80 e9       	ldi	r24, 0x90	; 144
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	9d 8f       	std	Y+29, r25	; 0x1d
    1ee8:	8c 8f       	std	Y+28, r24	; 0x1c
    1eea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <GLCD_Command+0x160>
    1ef2:	9d 8f       	std	Y+29, r25	; 0x1d
    1ef4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ef8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	9f 8f       	std	Y+31, r25	; 0x1f
    1efe:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <GLCD_Command+0x154>
    1f08:	24 c0       	rjmp	.+72     	; 0x1f52 <GLCD_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f0c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f0e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f10:	9b a1       	ldd	r25, Y+35	; 0x23
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f1c:	8e 8f       	std	Y+30, r24	; 0x1e
    1f1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f20:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f22:	9b 8f       	std	Y+27, r25	; 0x1b
    1f24:	8a 8f       	std	Y+26, r24	; 0x1a
    1f26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f28:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <GLCD_Command+0x19c>
    1f2e:	9b 8f       	std	Y+27, r25	; 0x1b
    1f30:	8a 8f       	std	Y+26, r24	; 0x1a
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <GLCD_Command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f34:	69 a5       	ldd	r22, Y+41	; 0x29
    1f36:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	88 a7       	std	Y+40, r24	; 0x28
    1f46:	88 a5       	ldd	r24, Y+40	; 0x28
    1f48:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f4a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f4c:	8a 95       	dec	r24
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <GLCD_Command+0x1be>
    1f50:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    1f52:	a8 e3       	ldi	r26, 0x38	; 56
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e8 e3       	ldi	r30, 0x38	; 56
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8e 7f       	andi	r24, 0xFE	; 254
    1f5e:	8c 93       	st	X, r24
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 ea       	ldi	r26, 0xA0	; 160
    1f66:	b0 e4       	ldi	r27, 0x40	; 64
    1f68:	8d 8b       	std	Y+21, r24	; 0x15
    1f6a:	9e 8b       	std	Y+22, r25	; 0x16
    1f6c:	af 8b       	std	Y+23, r26	; 0x17
    1f6e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f70:	6d 89       	ldd	r22, Y+21	; 0x15
    1f72:	7e 89       	ldd	r23, Y+22	; 0x16
    1f74:	8f 89       	ldd	r24, Y+23	; 0x17
    1f76:	98 8d       	ldd	r25, Y+24	; 0x18
    1f78:	2b ea       	ldi	r18, 0xAB	; 171
    1f7a:	3a ea       	ldi	r19, 0xAA	; 170
    1f7c:	4a ea       	ldi	r20, 0xAA	; 170
    1f7e:	50 e4       	ldi	r21, 0x40	; 64
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	89 8b       	std	Y+17, r24	; 0x11
    1f8a:	9a 8b       	std	Y+18, r25	; 0x12
    1f8c:	ab 8b       	std	Y+19, r26	; 0x13
    1f8e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f90:	69 89       	ldd	r22, Y+17	; 0x11
    1f92:	7a 89       	ldd	r23, Y+18	; 0x12
    1f94:	8b 89       	ldd	r24, Y+19	; 0x13
    1f96:	9c 89       	ldd	r25, Y+20	; 0x14
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	1c f4       	brge	.+6      	; 0x1fae <GLCD_Command+0x220>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	88 8b       	std	Y+16, r24	; 0x10
    1fac:	91 c0       	rjmp	.+290    	; 0x20d0 <GLCD_Command+0x342>
	else if (__tmp > 255)
    1fae:	69 89       	ldd	r22, Y+17	; 0x11
    1fb0:	7a 89       	ldd	r23, Y+18	; 0x12
    1fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4f e7       	ldi	r20, 0x7F	; 127
    1fbc:	53 e4       	ldi	r21, 0x43	; 67
    1fbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	0c f0       	brlt	.+2      	; 0x1fc8 <GLCD_Command+0x23a>
    1fc6:	7b c0       	rjmp	.+246    	; 0x20be <GLCD_Command+0x330>
	{
		_delay_ms(__us / 1000.0);
    1fc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fca:	7e 89       	ldd	r23, Y+22	; 0x16
    1fcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fce:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a e7       	ldi	r20, 0x7A	; 122
    1fd6:	54 e4       	ldi	r21, 0x44	; 68
    1fd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8c 87       	std	Y+12, r24	; 0x0c
    1fe2:	9d 87       	std	Y+13, r25	; 0x0d
    1fe4:	ae 87       	std	Y+14, r26	; 0x0e
    1fe6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fea:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fec:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fee:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4a e7       	ldi	r20, 0x7A	; 122
    1ff6:	55 e4       	ldi	r21, 0x45	; 69
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	88 87       	std	Y+8, r24	; 0x08
    2002:	99 87       	std	Y+9, r25	; 0x09
    2004:	aa 87       	std	Y+10, r26	; 0x0a
    2006:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2008:	68 85       	ldd	r22, Y+8	; 0x08
    200a:	79 85       	ldd	r23, Y+9	; 0x09
    200c:	8a 85       	ldd	r24, Y+10	; 0x0a
    200e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e8       	ldi	r20, 0x80	; 128
    2016:	5f e3       	ldi	r21, 0x3F	; 63
    2018:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    201c:	88 23       	and	r24, r24
    201e:	2c f4       	brge	.+10     	; 0x202a <GLCD_Command+0x29c>
		__ticks = 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9f 83       	std	Y+7, r25	; 0x07
    2026:	8e 83       	std	Y+6, r24	; 0x06
    2028:	3f c0       	rjmp	.+126    	; 0x20a8 <GLCD_Command+0x31a>
	else if (__tmp > 65535)
    202a:	68 85       	ldd	r22, Y+8	; 0x08
    202c:	79 85       	ldd	r23, Y+9	; 0x09
    202e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2030:	9b 85       	ldd	r25, Y+11	; 0x0b
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	3f ef       	ldi	r19, 0xFF	; 255
    2036:	4f e7       	ldi	r20, 0x7F	; 127
    2038:	57 e4       	ldi	r21, 0x47	; 71
    203a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203e:	18 16       	cp	r1, r24
    2040:	4c f5       	brge	.+82     	; 0x2094 <GLCD_Command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2042:	6c 85       	ldd	r22, Y+12	; 0x0c
    2044:	7d 85       	ldd	r23, Y+13	; 0x0d
    2046:	8e 85       	ldd	r24, Y+14	; 0x0e
    2048:	9f 85       	ldd	r25, Y+15	; 0x0f
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	51 e4       	ldi	r21, 0x41	; 65
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9f 83       	std	Y+7, r25	; 0x07
    2068:	8e 83       	std	Y+6, r24	; 0x06
    206a:	0f c0       	rjmp	.+30     	; 0x208a <GLCD_Command+0x2fc>
    206c:	80 e9       	ldi	r24, 0x90	; 144
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	9d 83       	std	Y+5, r25	; 0x05
    2072:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <GLCD_Command+0x2ea>
    207c:	9d 83       	std	Y+5, r25	; 0x05
    207e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2080:	8e 81       	ldd	r24, Y+6	; 0x06
    2082:	9f 81       	ldd	r25, Y+7	; 0x07
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	9f 83       	std	Y+7, r25	; 0x07
    2088:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208a:	8e 81       	ldd	r24, Y+6	; 0x06
    208c:	9f 81       	ldd	r25, Y+7	; 0x07
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	69 f7       	brne	.-38     	; 0x206c <GLCD_Command+0x2de>
    2092:	24 c0       	rjmp	.+72     	; 0x20dc <GLCD_Command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2094:	68 85       	ldd	r22, Y+8	; 0x08
    2096:	79 85       	ldd	r23, Y+9	; 0x09
    2098:	8a 85       	ldd	r24, Y+10	; 0x0a
    209a:	9b 85       	ldd	r25, Y+11	; 0x0b
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	9f 83       	std	Y+7, r25	; 0x07
    20a6:	8e 83       	std	Y+6, r24	; 0x06
    20a8:	8e 81       	ldd	r24, Y+6	; 0x06
    20aa:	9f 81       	ldd	r25, Y+7	; 0x07
    20ac:	9b 83       	std	Y+3, r25	; 0x03
    20ae:	8a 83       	std	Y+2, r24	; 0x02
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	9b 81       	ldd	r25, Y+3	; 0x03
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <GLCD_Command+0x326>
    20b8:	9b 83       	std	Y+3, r25	; 0x03
    20ba:	8a 83       	std	Y+2, r24	; 0x02
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <GLCD_Command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20be:	69 89       	ldd	r22, Y+17	; 0x11
    20c0:	7a 89       	ldd	r23, Y+18	; 0x12
    20c2:	8b 89       	ldd	r24, Y+19	; 0x13
    20c4:	9c 89       	ldd	r25, Y+20	; 0x14
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	88 8b       	std	Y+16, r24	; 0x10
    20d0:	88 89       	ldd	r24, Y+16	; 0x10
    20d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	8a 95       	dec	r24
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <GLCD_Command+0x348>
    20da:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    20dc:	e1 96       	adiw	r28, 0x31	; 49
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <GLCD_Data>:

void GLCD_Data(char Data)		/* GLCD data function */
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	e1 97       	sbiw	r28, 0x31	; 49
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Data;		/* Copy data on data pin */
    2104:	eb e3       	ldi	r30, 0x3B	; 59
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	89 a9       	ldd	r24, Y+49	; 0x31
    210a:	80 83       	st	Z, r24
	Command_Port |=  (1 << RS);	/* Make RS HIGH for data register */
    210c:	a8 e3       	ldi	r26, 0x38	; 56
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e8 e3       	ldi	r30, 0x38	; 56
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	84 60       	ori	r24, 0x04	; 4
    2118:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
    211a:	a8 e3       	ldi	r26, 0x38	; 56
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e8 e3       	ldi	r30, 0x38	; 56
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	8d 7f       	andi	r24, 0xFD	; 253
    2126:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    2128:	a8 e3       	ldi	r26, 0x38	; 56
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e8 e3       	ldi	r30, 0x38	; 56
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	81 60       	ori	r24, 0x01	; 1
    2134:	8c 93       	st	X, r24
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 ea       	ldi	r26, 0xA0	; 160
    213c:	b0 e4       	ldi	r27, 0x40	; 64
    213e:	8d a7       	std	Y+45, r24	; 0x2d
    2140:	9e a7       	std	Y+46, r25	; 0x2e
    2142:	af a7       	std	Y+47, r26	; 0x2f
    2144:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2146:	6d a5       	ldd	r22, Y+45	; 0x2d
    2148:	7e a5       	ldd	r23, Y+46	; 0x2e
    214a:	8f a5       	ldd	r24, Y+47	; 0x2f
    214c:	98 a9       	ldd	r25, Y+48	; 0x30
    214e:	2b ea       	ldi	r18, 0xAB	; 171
    2150:	3a ea       	ldi	r19, 0xAA	; 170
    2152:	4a ea       	ldi	r20, 0xAA	; 170
    2154:	50 e4       	ldi	r21, 0x40	; 64
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	89 a7       	std	Y+41, r24	; 0x29
    2160:	9a a7       	std	Y+42, r25	; 0x2a
    2162:	ab a7       	std	Y+43, r26	; 0x2b
    2164:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2166:	69 a5       	ldd	r22, Y+41	; 0x29
    2168:	7a a5       	ldd	r23, Y+42	; 0x2a
    216a:	8b a5       	ldd	r24, Y+43	; 0x2b
    216c:	9c a5       	ldd	r25, Y+44	; 0x2c
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	1c f4       	brge	.+6      	; 0x2184 <GLCD_Data+0x96>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	88 a7       	std	Y+40, r24	; 0x28
    2182:	91 c0       	rjmp	.+290    	; 0x22a6 <GLCD_Data+0x1b8>
	else if (__tmp > 255)
    2184:	69 a5       	ldd	r22, Y+41	; 0x29
    2186:	7a a5       	ldd	r23, Y+42	; 0x2a
    2188:	8b a5       	ldd	r24, Y+43	; 0x2b
    218a:	9c a5       	ldd	r25, Y+44	; 0x2c
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	53 e4       	ldi	r21, 0x43	; 67
    2194:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2198:	18 16       	cp	r1, r24
    219a:	0c f0       	brlt	.+2      	; 0x219e <GLCD_Data+0xb0>
    219c:	7b c0       	rjmp	.+246    	; 0x2294 <GLCD_Data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    219e:	6d a5       	ldd	r22, Y+45	; 0x2d
    21a0:	7e a5       	ldd	r23, Y+46	; 0x2e
    21a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a4:	98 a9       	ldd	r25, Y+48	; 0x30
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a e7       	ldi	r20, 0x7A	; 122
    21ac:	54 e4       	ldi	r21, 0x44	; 68
    21ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	8c a3       	std	Y+36, r24	; 0x24
    21b8:	9d a3       	std	Y+37, r25	; 0x25
    21ba:	ae a3       	std	Y+38, r26	; 0x26
    21bc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21be:	6c a1       	ldd	r22, Y+36	; 0x24
    21c0:	7d a1       	ldd	r23, Y+37	; 0x25
    21c2:	8e a1       	ldd	r24, Y+38	; 0x26
    21c4:	9f a1       	ldd	r25, Y+39	; 0x27
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	4a e7       	ldi	r20, 0x7A	; 122
    21cc:	55 e4       	ldi	r21, 0x45	; 69
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	88 a3       	std	Y+32, r24	; 0x20
    21d8:	99 a3       	std	Y+33, r25	; 0x21
    21da:	aa a3       	std	Y+34, r26	; 0x22
    21dc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21de:	68 a1       	ldd	r22, Y+32	; 0x20
    21e0:	79 a1       	ldd	r23, Y+33	; 0x21
    21e2:	8a a1       	ldd	r24, Y+34	; 0x22
    21e4:	9b a1       	ldd	r25, Y+35	; 0x23
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e8       	ldi	r20, 0x80	; 128
    21ec:	5f e3       	ldi	r21, 0x3F	; 63
    21ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f2:	88 23       	and	r24, r24
    21f4:	2c f4       	brge	.+10     	; 0x2200 <GLCD_Data+0x112>
		__ticks = 1;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	9f 8f       	std	Y+31, r25	; 0x1f
    21fc:	8e 8f       	std	Y+30, r24	; 0x1e
    21fe:	3f c0       	rjmp	.+126    	; 0x227e <GLCD_Data+0x190>
	else if (__tmp > 65535)
    2200:	68 a1       	ldd	r22, Y+32	; 0x20
    2202:	79 a1       	ldd	r23, Y+33	; 0x21
    2204:	8a a1       	ldd	r24, Y+34	; 0x22
    2206:	9b a1       	ldd	r25, Y+35	; 0x23
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	3f ef       	ldi	r19, 0xFF	; 255
    220c:	4f e7       	ldi	r20, 0x7F	; 127
    220e:	57 e4       	ldi	r21, 0x47	; 71
    2210:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2214:	18 16       	cp	r1, r24
    2216:	4c f5       	brge	.+82     	; 0x226a <GLCD_Data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2218:	6c a1       	ldd	r22, Y+36	; 0x24
    221a:	7d a1       	ldd	r23, Y+37	; 0x25
    221c:	8e a1       	ldd	r24, Y+38	; 0x26
    221e:	9f a1       	ldd	r25, Y+39	; 0x27
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e2       	ldi	r20, 0x20	; 32
    2226:	51 e4       	ldi	r21, 0x41	; 65
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9f 8f       	std	Y+31, r25	; 0x1f
    223e:	8e 8f       	std	Y+30, r24	; 0x1e
    2240:	0f c0       	rjmp	.+30     	; 0x2260 <GLCD_Data+0x172>
    2242:	80 e9       	ldi	r24, 0x90	; 144
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	9d 8f       	std	Y+29, r25	; 0x1d
    2248:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    224a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    224c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <GLCD_Data+0x160>
    2252:	9d 8f       	std	Y+29, r25	; 0x1d
    2254:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2256:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2258:	9f 8d       	ldd	r25, Y+31	; 0x1f
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	9f 8f       	std	Y+31, r25	; 0x1f
    225e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2260:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2262:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	69 f7       	brne	.-38     	; 0x2242 <GLCD_Data+0x154>
    2268:	24 c0       	rjmp	.+72     	; 0x22b2 <GLCD_Data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226a:	68 a1       	ldd	r22, Y+32	; 0x20
    226c:	79 a1       	ldd	r23, Y+33	; 0x21
    226e:	8a a1       	ldd	r24, Y+34	; 0x22
    2270:	9b a1       	ldd	r25, Y+35	; 0x23
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	9f 8f       	std	Y+31, r25	; 0x1f
    227c:	8e 8f       	std	Y+30, r24	; 0x1e
    227e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2280:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2282:	9b 8f       	std	Y+27, r25	; 0x1b
    2284:	8a 8f       	std	Y+26, r24	; 0x1a
    2286:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2288:	9b 8d       	ldd	r25, Y+27	; 0x1b
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	f1 f7       	brne	.-4      	; 0x228a <GLCD_Data+0x19c>
    228e:	9b 8f       	std	Y+27, r25	; 0x1b
    2290:	8a 8f       	std	Y+26, r24	; 0x1a
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <GLCD_Data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2294:	69 a5       	ldd	r22, Y+41	; 0x29
    2296:	7a a5       	ldd	r23, Y+42	; 0x2a
    2298:	8b a5       	ldd	r24, Y+43	; 0x2b
    229a:	9c a5       	ldd	r25, Y+44	; 0x2c
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	88 a7       	std	Y+40, r24	; 0x28
    22a6:	88 a5       	ldd	r24, Y+40	; 0x28
    22a8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22aa:	89 8d       	ldd	r24, Y+25	; 0x19
    22ac:	8a 95       	dec	r24
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <GLCD_Data+0x1be>
    22b0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    22b2:	a8 e3       	ldi	r26, 0x38	; 56
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e8 e3       	ldi	r30, 0x38	; 56
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	8e 7f       	andi	r24, 0xFE	; 254
    22be:	8c 93       	st	X, r24
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a0 ea       	ldi	r26, 0xA0	; 160
    22c6:	b0 e4       	ldi	r27, 0x40	; 64
    22c8:	8d 8b       	std	Y+21, r24	; 0x15
    22ca:	9e 8b       	std	Y+22, r25	; 0x16
    22cc:	af 8b       	std	Y+23, r26	; 0x17
    22ce:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22d0:	6d 89       	ldd	r22, Y+21	; 0x15
    22d2:	7e 89       	ldd	r23, Y+22	; 0x16
    22d4:	8f 89       	ldd	r24, Y+23	; 0x17
    22d6:	98 8d       	ldd	r25, Y+24	; 0x18
    22d8:	2b ea       	ldi	r18, 0xAB	; 171
    22da:	3a ea       	ldi	r19, 0xAA	; 170
    22dc:	4a ea       	ldi	r20, 0xAA	; 170
    22de:	50 e4       	ldi	r21, 0x40	; 64
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	89 8b       	std	Y+17, r24	; 0x11
    22ea:	9a 8b       	std	Y+18, r25	; 0x12
    22ec:	ab 8b       	std	Y+19, r26	; 0x13
    22ee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22f0:	69 89       	ldd	r22, Y+17	; 0x11
    22f2:	7a 89       	ldd	r23, Y+18	; 0x12
    22f4:	8b 89       	ldd	r24, Y+19	; 0x13
    22f6:	9c 89       	ldd	r25, Y+20	; 0x14
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e8       	ldi	r20, 0x80	; 128
    22fe:	5f e3       	ldi	r21, 0x3F	; 63
    2300:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2304:	88 23       	and	r24, r24
    2306:	1c f4       	brge	.+6      	; 0x230e <GLCD_Data+0x220>
		__ticks = 1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	88 8b       	std	Y+16, r24	; 0x10
    230c:	91 c0       	rjmp	.+290    	; 0x2430 <GLCD_Data+0x342>
	else if (__tmp > 255)
    230e:	69 89       	ldd	r22, Y+17	; 0x11
    2310:	7a 89       	ldd	r23, Y+18	; 0x12
    2312:	8b 89       	ldd	r24, Y+19	; 0x13
    2314:	9c 89       	ldd	r25, Y+20	; 0x14
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	53 e4       	ldi	r21, 0x43	; 67
    231e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	0c f0       	brlt	.+2      	; 0x2328 <GLCD_Data+0x23a>
    2326:	7b c0       	rjmp	.+246    	; 0x241e <GLCD_Data+0x330>
	{
		_delay_ms(__us / 1000.0);
    2328:	6d 89       	ldd	r22, Y+21	; 0x15
    232a:	7e 89       	ldd	r23, Y+22	; 0x16
    232c:	8f 89       	ldd	r24, Y+23	; 0x17
    232e:	98 8d       	ldd	r25, Y+24	; 0x18
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a e7       	ldi	r20, 0x7A	; 122
    2336:	54 e4       	ldi	r21, 0x44	; 68
    2338:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8c 87       	std	Y+12, r24	; 0x0c
    2342:	9d 87       	std	Y+13, r25	; 0x0d
    2344:	ae 87       	std	Y+14, r26	; 0x0e
    2346:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	6c 85       	ldd	r22, Y+12	; 0x0c
    234a:	7d 85       	ldd	r23, Y+13	; 0x0d
    234c:	8e 85       	ldd	r24, Y+14	; 0x0e
    234e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	55 e4       	ldi	r21, 0x45	; 69
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	88 87       	std	Y+8, r24	; 0x08
    2362:	99 87       	std	Y+9, r25	; 0x09
    2364:	aa 87       	std	Y+10, r26	; 0x0a
    2366:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2368:	68 85       	ldd	r22, Y+8	; 0x08
    236a:	79 85       	ldd	r23, Y+9	; 0x09
    236c:	8a 85       	ldd	r24, Y+10	; 0x0a
    236e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <GLCD_Data+0x29c>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9f 83       	std	Y+7, r25	; 0x07
    2386:	8e 83       	std	Y+6, r24	; 0x06
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <GLCD_Data+0x31a>
	else if (__tmp > 65535)
    238a:	68 85       	ldd	r22, Y+8	; 0x08
    238c:	79 85       	ldd	r23, Y+9	; 0x09
    238e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2390:	9b 85       	ldd	r25, Y+11	; 0x0b
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <GLCD_Data+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    23a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    23a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    23a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9f 83       	std	Y+7, r25	; 0x07
    23c8:	8e 83       	std	Y+6, r24	; 0x06
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <GLCD_Data+0x2fc>
    23cc:	80 e9       	ldi	r24, 0x90	; 144
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	9d 83       	std	Y+5, r25	; 0x05
    23d2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23d4:	8c 81       	ldd	r24, Y+4	; 0x04
    23d6:	9d 81       	ldd	r25, Y+5	; 0x05
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <GLCD_Data+0x2ea>
    23dc:	9d 83       	std	Y+5, r25	; 0x05
    23de:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8e 81       	ldd	r24, Y+6	; 0x06
    23e2:	9f 81       	ldd	r25, Y+7	; 0x07
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9f 83       	std	Y+7, r25	; 0x07
    23e8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8e 81       	ldd	r24, Y+6	; 0x06
    23ec:	9f 81       	ldd	r25, Y+7	; 0x07
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <GLCD_Data+0x2de>
    23f2:	24 c0       	rjmp	.+72     	; 0x243c <GLCD_Data+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	68 85       	ldd	r22, Y+8	; 0x08
    23f6:	79 85       	ldd	r23, Y+9	; 0x09
    23f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9f 83       	std	Y+7, r25	; 0x07
    2406:	8e 83       	std	Y+6, r24	; 0x06
    2408:	8e 81       	ldd	r24, Y+6	; 0x06
    240a:	9f 81       	ldd	r25, Y+7	; 0x07
    240c:	9b 83       	std	Y+3, r25	; 0x03
    240e:	8a 83       	std	Y+2, r24	; 0x02
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	9b 81       	ldd	r25, Y+3	; 0x03
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <GLCD_Data+0x326>
    2418:	9b 83       	std	Y+3, r25	; 0x03
    241a:	8a 83       	std	Y+2, r24	; 0x02
    241c:	0f c0       	rjmp	.+30     	; 0x243c <GLCD_Data+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    241e:	69 89       	ldd	r22, Y+17	; 0x11
    2420:	7a 89       	ldd	r23, Y+18	; 0x12
    2422:	8b 89       	ldd	r24, Y+19	; 0x13
    2424:	9c 89       	ldd	r25, Y+20	; 0x14
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	88 8b       	std	Y+16, r24	; 0x10
    2430:	88 89       	ldd	r24, Y+16	; 0x10
    2432:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	8a 95       	dec	r24
    2438:	f1 f7       	brne	.-4      	; 0x2436 <GLCD_Data+0x348>
    243a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    243c:	e1 96       	adiw	r28, 0x31	; 49
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <GLCD_ClearAll>:



void GLCD_ClearAll()			/* GLCD all display clear function */
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	00 d0       	rcall	.+0      	; 0x2454 <GLCD_ClearAll+0x6>
    2454:	00 d0       	rcall	.+0      	; 0x2456 <GLCD_ClearAll+0x8>
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
    245a:	a8 e3       	ldi	r26, 0x38	; 56
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e8 e3       	ldi	r30, 0x38	; 56
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	80 63       	ori	r24, 0x30	; 48
    2466:	8c 93       	st	X, r24
	for(i = 0; i < TotalPage; i++)
    2468:	1c 82       	std	Y+4, r1	; 0x04
    246a:	1b 82       	std	Y+3, r1	; 0x03
    246c:	19 c0       	rjmp	.+50     	; 0x24a0 <GLCD_ClearAll+0x52>
	{
		GLCD_Command((0xB8) + i);/* Increment page */
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	88 54       	subi	r24, 0x48	; 72
    2472:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
		for(j = 0; j < 64; j++)
    2476:	1a 82       	std	Y+2, r1	; 0x02
    2478:	19 82       	std	Y+1, r1	; 0x01
    247a:	08 c0       	rjmp	.+16     	; 0x248c <GLCD_ClearAll+0x3e>
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	0e 94 77 10 	call	0x20ee	; 0x20ee <GLCD_Data>
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
		for(j = 0; j < 64; j++)
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	9a 81       	ldd	r25, Y+2	; 0x02
    2486:	01 96       	adiw	r24, 0x01	; 1
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	80 34       	cpi	r24, 0x40	; 64
    2492:	91 05       	cpc	r25, r1
    2494:	9c f3       	brlt	.-26     	; 0x247c <GLCD_ClearAll+0x2e>
void GLCD_ClearAll()			/* GLCD all display clear function */
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	01 96       	adiw	r24, 0x01	; 1
    249c:	9c 83       	std	Y+4, r25	; 0x04
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	9c 81       	ldd	r25, Y+4	; 0x04
    24a4:	88 30       	cpi	r24, 0x08	; 8
    24a6:	91 05       	cpc	r25, r1
    24a8:	14 f3       	brlt	.-60     	; 0x246e <GLCD_ClearAll+0x20>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
    24aa:	80 e4       	ldi	r24, 0x40	; 64
    24ac:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
    24b0:	88 eb       	ldi	r24, 0xB8	; 184
    24b2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <GLCD_String>:

/* This Function Display String From custom char */

void GLCD_String(char page_no, char *str,uint8 side)/* GLCD string write function */
{
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	60 97       	sbiw	r28, 0x10	; 16
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	8d 87       	std	Y+13, r24	; 0x0d
    24de:	7f 87       	std	Y+15, r23	; 0x0f
    24e0:	6e 87       	std	Y+14, r22	; 0x0e
    24e2:	48 8b       	std	Y+16, r20	; 0x10
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
    24e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e6:	88 2f       	mov	r24, r24
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	88 54       	subi	r24, 0x48	; 72
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	98 87       	std	Y+8, r25	; 0x08
    24f0:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int Y_address = 0;
    24f2:	1e 82       	std	Y+6, r1	; 0x06
    24f4:	1d 82       	std	Y+5, r1	; 0x05
	float Page_inc = 0.5;
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e0       	ldi	r26, 0x00	; 0
    24fc:	bf e3       	ldi	r27, 0x3F	; 63
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	ab 83       	std	Y+3, r26	; 0x03
    2504:	bc 83       	std	Y+4, r27	; 0x04

	if (side==0)
    2506:	88 89       	ldd	r24, Y+16	; 0x10
    2508:	88 23       	and	r24, r24
    250a:	79 f4       	brne	.+30     	; 0x252a <GLCD_String+0x66>
	{
		Command_Port |= (1 << CS1);	/* Select Left half of display */
    250c:	a8 e3       	ldi	r26, 0x38	; 56
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e8 e3       	ldi	r30, 0x38	; 56
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	80 61       	ori	r24, 0x10	; 16
    2518:	8c 93       	st	X, r24
		Command_Port &= ~(1 << CS2);
    251a:	a8 e3       	ldi	r26, 0x38	; 56
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e8 e3       	ldi	r30, 0x38	; 56
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	8f 7d       	andi	r24, 0xDF	; 223
    2526:	8c 93       	st	X, r24
    2528:	0e c0       	rjmp	.+28     	; 0x2546 <GLCD_String+0x82>
	}
	else
	{
		Command_Port |= (1 << CS2);	/* Select Left Right of display */
    252a:	a8 e3       	ldi	r26, 0x38	; 56
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e8 e3       	ldi	r30, 0x38	; 56
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	80 62       	ori	r24, 0x20	; 32
    2536:	8c 93       	st	X, r24
		Command_Port &= ~(1 << CS1);
    2538:	a8 e3       	ldi	r26, 0x38	; 56
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e8 e3       	ldi	r30, 0x38	; 56
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	8f 7e       	andi	r24, 0xEF	; 239
    2544:	8c 93       	st	X, r24
	}



	GLCD_Command(Page);
    2546:	8f 81       	ldd	r24, Y+7	; 0x07
    2548:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    254c:	1c 86       	std	Y+12, r1	; 0x0c
    254e:	1b 86       	std	Y+11, r1	; 0x0b
    2550:	16 c2       	rjmp	.+1068   	; 0x297e <GLCD_String+0x4ba>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
    2552:	8d 85       	ldd	r24, Y+13	; 0x0d
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	96 95       	lsr	r25
    255a:	98 2f       	mov	r25, r24
    255c:	88 27       	eor	r24, r24
    255e:	97 95       	ror	r25
    2560:	87 95       	ror	r24
    2562:	90 95       	com	r25
    2564:	81 95       	neg	r24
    2566:	9f 4f       	sbci	r25, 0xFF	; 255
    2568:	85 50       	subi	r24, 0x05	; 5
    256a:	9c 4f       	sbci	r25, 0xFC	; 252
    256c:	9c 01       	movw	r18, r24
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	28 17       	cp	r18, r24
    2574:	39 07       	cpc	r19, r25
    2576:	08 f4       	brcc	.+2      	; 0x257a <GLCD_String+0xb6>
    2578:	0d c2       	rjmp	.+1050   	; 0x2994 <GLCD_String+0x4d0>
		break;
		if (str[i]!=32)
    257a:	2e 85       	ldd	r18, Y+14	; 0x0e
    257c:	3f 85       	ldd	r19, Y+15	; 0x0f
    257e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2580:	9c 85       	ldd	r25, Y+12	; 0x0c
    2582:	f9 01       	movw	r30, r18
    2584:	e8 0f       	add	r30, r24
    2586:	f9 1f       	adc	r31, r25
    2588:	80 81       	ld	r24, Z
    258a:	80 32       	cpi	r24, 0x20	; 32
    258c:	09 f4       	brne	.+2      	; 0x2590 <GLCD_String+0xcc>
    258e:	80 c0       	rjmp	.+256    	; 0x2690 <GLCD_String+0x1cc>
		{
			for (column=1; column<=FontWidth; column++)
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9a 87       	std	Y+10, r25	; 0x0a
    2596:	89 87       	std	Y+9, r24	; 0x09
    2598:	75 c0       	rjmp	.+234    	; 0x2684 <GLCD_String+0x1c0>
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
    259a:	2d 81       	ldd	r18, Y+5	; 0x05
    259c:	3e 81       	ldd	r19, Y+6	; 0x06
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	89 01       	movw	r16, r18
    25a4:	08 0f       	add	r16, r24
    25a6:	19 1f       	adc	r17, r25
    25a8:	69 81       	ldd	r22, Y+1	; 0x01
    25aa:	7a 81       	ldd	r23, Y+2	; 0x02
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	9c 81       	ldd	r25, Y+4	; 0x04
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	96 95       	lsr	r25
    25ce:	98 2f       	mov	r25, r24
    25d0:	88 27       	eor	r24, r24
    25d2:	97 95       	ror	r25
    25d4:	87 95       	ror	r24
    25d6:	08 17       	cp	r16, r24
    25d8:	19 07       	cpc	r17, r25
    25da:	09 f0       	breq	.+2      	; 0x25de <GLCD_String+0x11a>
    25dc:	4e c0       	rjmp	.+156    	; 0x267a <GLCD_String+0x1b6>
				{
					if (column == FontWidth)
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	85 30       	cpi	r24, 0x05	; 5
    25e4:	91 05       	cpc	r25, r1
    25e6:	09 f4       	brne	.+2      	; 0x25ea <GLCD_String+0x126>
    25e8:	53 c0       	rjmp	.+166    	; 0x2690 <GLCD_String+0x1cc>
					break;
					GLCD_Command(0x40);
    25ea:	80 e4       	ldi	r24, 0x40	; 64
    25ec:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
					Y_address = Y_address + column;
    25f0:	2d 81       	ldd	r18, Y+5	; 0x05
    25f2:	3e 81       	ldd	r19, Y+6	; 0x06
    25f4:	89 85       	ldd	r24, Y+9	; 0x09
    25f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f8:	82 0f       	add	r24, r18
    25fa:	93 1f       	adc	r25, r19
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
					Command_Port ^= (1 << CS1);
    2600:	a8 e3       	ldi	r26, 0x38	; 56
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e8 e3       	ldi	r30, 0x38	; 56
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	90 81       	ld	r25, Z
    260a:	80 e1       	ldi	r24, 0x10	; 16
    260c:	89 27       	eor	r24, r25
    260e:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    2610:	a8 e3       	ldi	r26, 0x38	; 56
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e8 e3       	ldi	r30, 0x38	; 56
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	90 81       	ld	r25, Z
    261a:	80 e2       	ldi	r24, 0x20	; 32
    261c:	89 27       	eor	r24, r25
    261e:	8c 93       	st	X, r24
					GLCD_Command(Page + Page_inc);
    2620:	8f 81       	ldd	r24, Y+7	; 0x07
    2622:	98 85       	ldd	r25, Y+8	; 0x08
    2624:	cc 01       	movw	r24, r24
    2626:	a0 e0       	ldi	r26, 0x00	; 0
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	bc 01       	movw	r22, r24
    262c:	cd 01       	movw	r24, r26
    262e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	29 81       	ldd	r18, Y+1	; 0x01
    263c:	3a 81       	ldd	r19, Y+2	; 0x02
    263e:	4b 81       	ldd	r20, Y+3	; 0x03
    2640:	5c 81       	ldd	r21, Y+4	; 0x04
    2642:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    265a:	69 81       	ldd	r22, Y+1	; 0x01
    265c:	7a 81       	ldd	r23, Y+2	; 0x02
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	9c 81       	ldd	r25, Y+4	; 0x04
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	9a 83       	std	Y+2, r25	; 0x02
    2676:	ab 83       	std	Y+3, r26	; 0x03
    2678:	bc 83       	std	Y+4, r27	; 0x04
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
		break;
		if (str[i]!=32)
		{
			for (column=1; column<=FontWidth; column++)
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	9a 87       	std	Y+10, r25	; 0x0a
    2682:	89 87       	std	Y+9, r24	; 0x09
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	86 30       	cpi	r24, 0x06	; 6
    268a:	91 05       	cpc	r25, r1
    268c:	08 f4       	brcc	.+2      	; 0x2690 <GLCD_String+0x1cc>
    268e:	85 cf       	rjmp	.-246    	; 0x259a <GLCD_String+0xd6>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
    2690:	8d 85       	ldd	r24, Y+13	; 0x0d
    2692:	88 2f       	mov	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	96 95       	lsr	r25
    2698:	98 2f       	mov	r25, r24
    269a:	88 27       	eor	r24, r24
    269c:	97 95       	ror	r25
    269e:	87 95       	ror	r24
    26a0:	90 95       	com	r25
    26a2:	81 95       	neg	r24
    26a4:	9f 4f       	sbci	r25, 0xFF	; 255
    26a6:	85 50       	subi	r24, 0x05	; 5
    26a8:	9c 4f       	sbci	r25, 0xFC	; 252
    26aa:	9c 01       	movw	r18, r24
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	9e 81       	ldd	r25, Y+6	; 0x06
    26b0:	28 17       	cp	r18, r24
    26b2:	39 07       	cpc	r19, r25
    26b4:	08 f4       	brcc	.+2      	; 0x26b8 <GLCD_String+0x1f4>
    26b6:	6e c1       	rjmp	.+732    	; 0x2994 <GLCD_String+0x4d0>
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
    26b8:	2e 85       	ldd	r18, Y+14	; 0x0e
    26ba:	3f 85       	ldd	r19, Y+15	; 0x0f
    26bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    26be:	9c 85       	ldd	r25, Y+12	; 0x0c
    26c0:	f9 01       	movw	r30, r18
    26c2:	e8 0f       	add	r30, r24
    26c4:	f9 1f       	adc	r31, r25
    26c6:	80 81       	ld	r24, Z
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	c9 01       	movw	r24, r18
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	82 0f       	add	r24, r18
    26d4:	93 1f       	adc	r25, r19
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	82 0f       	add	r24, r18
    26e4:	93 1f       	adc	r25, r19
    26e6:	8c 50       	subi	r24, 0x0C	; 12
    26e8:	93 40       	sbci	r25, 0x03	; 3
    26ea:	8b 50       	subi	r24, 0x0B	; 11
    26ec:	9e 4f       	sbci	r25, 0xFE	; 254
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	59 f0       	breq	.+22     	; 0x2708 <GLCD_String+0x244>
    26f2:	2e 85       	ldd	r18, Y+14	; 0x0e
    26f4:	3f 85       	ldd	r19, Y+15	; 0x0f
    26f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    26f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    26fa:	f9 01       	movw	r30, r18
    26fc:	e8 0f       	add	r30, r24
    26fe:	f9 1f       	adc	r31, r25
    2700:	80 81       	ld	r24, Z
    2702:	80 32       	cpi	r24, 0x20	; 32
    2704:	09 f0       	breq	.+2      	; 0x2708 <GLCD_String+0x244>
    2706:	76 c0       	rjmp	.+236    	; 0x27f4 <GLCD_String+0x330>
		{
			for(column=0; column<FontWidth; column++)
    2708:	1a 86       	std	Y+10, r1	; 0x0a
    270a:	19 86       	std	Y+9, r1	; 0x09
    270c:	6c c0       	rjmp	.+216    	; 0x27e6 <GLCD_String+0x322>
			{
				GLCD_Data(font[str[i]-32][column]);
    270e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2710:	3f 85       	ldd	r19, Y+15	; 0x0f
    2712:	8b 85       	ldd	r24, Y+11	; 0x0b
    2714:	9c 85       	ldd	r25, Y+12	; 0x0c
    2716:	f9 01       	movw	r30, r18
    2718:	e8 0f       	add	r30, r24
    271a:	f9 1f       	adc	r31, r25
    271c:	80 81       	ld	r24, Z
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9c 01       	movw	r18, r24
    2724:	20 52       	subi	r18, 0x20	; 32
    2726:	30 40       	sbci	r19, 0x00	; 0
    2728:	49 85       	ldd	r20, Y+9	; 0x09
    272a:	5a 85       	ldd	r21, Y+10	; 0x0a
    272c:	c9 01       	movw	r24, r18
    272e:	88 0f       	add	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	82 0f       	add	r24, r18
    2738:	93 1f       	adc	r25, r19
    273a:	84 0f       	add	r24, r20
    273c:	95 1f       	adc	r25, r21
    273e:	fc 01       	movw	r30, r24
    2740:	eb 50       	subi	r30, 0x0B	; 11
    2742:	fe 4f       	sbci	r31, 0xFE	; 254
    2744:	80 81       	ld	r24, Z
    2746:	0e 94 77 10 	call	0x20ee	; 0x20ee <GLCD_Data>
				if((Y_address+1)%64==0)
    274a:	8d 81       	ldd	r24, Y+5	; 0x05
    274c:	9e 81       	ldd	r25, Y+6	; 0x06
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	8f 73       	andi	r24, 0x3F	; 63
    2752:	90 70       	andi	r25, 0x00	; 0
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	e9 f5       	brne	.+122    	; 0x27d2 <GLCD_String+0x30e>
				{
					Command_Port ^= (1 << CS1);
    2758:	a8 e3       	ldi	r26, 0x38	; 56
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	e8 e3       	ldi	r30, 0x38	; 56
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	90 81       	ld	r25, Z
    2762:	80 e1       	ldi	r24, 0x10	; 16
    2764:	89 27       	eor	r24, r25
    2766:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    2768:	a8 e3       	ldi	r26, 0x38	; 56
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e8 e3       	ldi	r30, 0x38	; 56
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	90 81       	ld	r25, Z
    2772:	80 e2       	ldi	r24, 0x20	; 32
    2774:	89 27       	eor	r24, r25
    2776:	8c 93       	st	X, r24
					GLCD_Command((Page+Page_inc));
    2778:	8f 81       	ldd	r24, Y+7	; 0x07
    277a:	98 85       	ldd	r25, Y+8	; 0x08
    277c:	cc 01       	movw	r24, r24
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	bc 01       	movw	r22, r24
    2790:	cd 01       	movw	r24, r26
    2792:	29 81       	ldd	r18, Y+1	; 0x01
    2794:	3a 81       	ldd	r19, Y+2	; 0x02
    2796:	4b 81       	ldd	r20, Y+3	; 0x03
    2798:	5c 81       	ldd	r21, Y+4	; 0x04
    279a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	bc 01       	movw	r22, r24
    27a4:	cd 01       	movw	r24, r26
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    27b2:	69 81       	ldd	r22, Y+1	; 0x01
    27b4:	7a 81       	ldd	r23, Y+2	; 0x02
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	5f e3       	ldi	r21, 0x3F	; 63
    27c2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	ab 83       	std	Y+3, r26	; 0x03
    27d0:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	01 96       	adiw	r24, 0x01	; 1
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
    27dc:	89 85       	ldd	r24, Y+9	; 0x09
    27de:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e0:	01 96       	adiw	r24, 0x01	; 1
    27e2:	9a 87       	std	Y+10, r25	; 0x0a
    27e4:	89 87       	std	Y+9, r24	; 0x09
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	85 30       	cpi	r24, 0x05	; 5
    27ec:	91 05       	cpc	r25, r1
    27ee:	08 f4       	brcc	.+2      	; 0x27f2 <GLCD_String+0x32e>
    27f0:	8e cf       	rjmp	.-228    	; 0x270e <GLCD_String+0x24a>
    27f2:	c0 c0       	rjmp	.+384    	; 0x2974 <GLCD_String+0x4b0>
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    27f4:	1a 86       	std	Y+10, r1	; 0x0a
    27f6:	19 86       	std	Y+9, r1	; 0x09
    27f8:	6c c0       	rjmp	.+216    	; 0x28d2 <GLCD_String+0x40e>
			{
				GLCD_Data(font[str[i]-32][column]);
    27fa:	2e 85       	ldd	r18, Y+14	; 0x0e
    27fc:	3f 85       	ldd	r19, Y+15	; 0x0f
    27fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2800:	9c 85       	ldd	r25, Y+12	; 0x0c
    2802:	f9 01       	movw	r30, r18
    2804:	e8 0f       	add	r30, r24
    2806:	f9 1f       	adc	r31, r25
    2808:	80 81       	ld	r24, Z
    280a:	88 2f       	mov	r24, r24
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	9c 01       	movw	r18, r24
    2810:	20 52       	subi	r18, 0x20	; 32
    2812:	30 40       	sbci	r19, 0x00	; 0
    2814:	49 85       	ldd	r20, Y+9	; 0x09
    2816:	5a 85       	ldd	r21, Y+10	; 0x0a
    2818:	c9 01       	movw	r24, r18
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	82 0f       	add	r24, r18
    2824:	93 1f       	adc	r25, r19
    2826:	84 0f       	add	r24, r20
    2828:	95 1f       	adc	r25, r21
    282a:	fc 01       	movw	r30, r24
    282c:	eb 50       	subi	r30, 0x0B	; 11
    282e:	fe 4f       	sbci	r31, 0xFE	; 254
    2830:	80 81       	ld	r24, Z
    2832:	0e 94 77 10 	call	0x20ee	; 0x20ee <GLCD_Data>
				if((Y_address+1)%64==0)
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	9e 81       	ldd	r25, Y+6	; 0x06
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	8f 73       	andi	r24, 0x3F	; 63
    283e:	90 70       	andi	r25, 0x00	; 0
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	e9 f5       	brne	.+122    	; 0x28be <GLCD_String+0x3fa>
				{
					Command_Port ^= (1 << CS1);
    2844:	a8 e3       	ldi	r26, 0x38	; 56
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e8 e3       	ldi	r30, 0x38	; 56
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	90 81       	ld	r25, Z
    284e:	80 e1       	ldi	r24, 0x10	; 16
    2850:	89 27       	eor	r24, r25
    2852:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    2854:	a8 e3       	ldi	r26, 0x38	; 56
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e8 e3       	ldi	r30, 0x38	; 56
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	90 81       	ld	r25, Z
    285e:	80 e2       	ldi	r24, 0x20	; 32
    2860:	89 27       	eor	r24, r25
    2862:	8c 93       	st	X, r24
					GLCD_Command((Page+Page_inc));
    2864:	8f 81       	ldd	r24, Y+7	; 0x07
    2866:	98 85       	ldd	r25, Y+8	; 0x08
    2868:	cc 01       	movw	r24, r24
    286a:	a0 e0       	ldi	r26, 0x00	; 0
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	29 81       	ldd	r18, Y+1	; 0x01
    2880:	3a 81       	ldd	r19, Y+2	; 0x02
    2882:	4b 81       	ldd	r20, Y+3	; 0x03
    2884:	5c 81       	ldd	r21, Y+4	; 0x04
    2886:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    289e:	69 81       	ldd	r22, Y+1	; 0x01
    28a0:	7a 81       	ldd	r23, Y+2	; 0x02
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	9c 81       	ldd	r25, Y+4	; 0x04
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	5f e3       	ldi	r21, 0x3F	; 63
    28ae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	ab 83       	std	Y+3, r26	; 0x03
    28bc:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	01 96       	adiw	r24, 0x01	; 1
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    28c8:	89 85       	ldd	r24, Y+9	; 0x09
    28ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	9a 87       	std	Y+10, r25	; 0x0a
    28d0:	89 87       	std	Y+9, r24	; 0x09
    28d2:	89 85       	ldd	r24, Y+9	; 0x09
    28d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d6:	85 30       	cpi	r24, 0x05	; 5
    28d8:	91 05       	cpc	r25, r1
    28da:	08 f4       	brcc	.+2      	; 0x28de <GLCD_String+0x41a>
    28dc:	8e cf       	rjmp	.-228    	; 0x27fa <GLCD_String+0x336>
					GLCD_Command((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	0e 94 77 10 	call	0x20ee	; 0x20ee <GLCD_Data>
			Y_address++;
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	01 96       	adiw	r24, 0x01	; 1
    28ea:	9e 83       	std	Y+6, r25	; 0x06
    28ec:	8d 83       	std	Y+5, r24	; 0x05
			if((Y_address)%64 == 0)
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
    28f0:	9e 81       	ldd	r25, Y+6	; 0x06
    28f2:	8f 73       	andi	r24, 0x3F	; 63
    28f4:	90 70       	andi	r25, 0x00	; 0
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	e9 f5       	brne	.+122    	; 0x2974 <GLCD_String+0x4b0>
			{
				Command_Port ^= (1 << CS1);
    28fa:	a8 e3       	ldi	r26, 0x38	; 56
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e8 e3       	ldi	r30, 0x38	; 56
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	90 81       	ld	r25, Z
    2904:	80 e1       	ldi	r24, 0x10	; 16
    2906:	89 27       	eor	r24, r25
    2908:	8c 93       	st	X, r24
				Command_Port ^= (1 << CS2);
    290a:	a8 e3       	ldi	r26, 0x38	; 56
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e8 e3       	ldi	r30, 0x38	; 56
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	90 81       	ld	r25, Z
    2914:	80 e2       	ldi	r24, 0x20	; 32
    2916:	89 27       	eor	r24, r25
    2918:	8c 93       	st	X, r24
				GLCD_Command((Page+Page_inc));
    291a:	8f 81       	ldd	r24, Y+7	; 0x07
    291c:	98 85       	ldd	r25, Y+8	; 0x08
    291e:	cc 01       	movw	r24, r24
    2920:	a0 e0       	ldi	r26, 0x00	; 0
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	bc 01       	movw	r22, r24
    2926:	cd 01       	movw	r24, r26
    2928:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	bc 01       	movw	r22, r24
    2932:	cd 01       	movw	r24, r26
    2934:	29 81       	ldd	r18, Y+1	; 0x01
    2936:	3a 81       	ldd	r19, Y+2	; 0x02
    2938:	4b 81       	ldd	r20, Y+3	; 0x03
    293a:	5c 81       	ldd	r21, Y+4	; 0x04
    293c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
				Page_inc = Page_inc + 0.5;
    2954:	69 81       	ldd	r22, Y+1	; 0x01
    2956:	7a 81       	ldd	r23, Y+2	; 0x02
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	5f e3       	ldi	r21, 0x3F	; 63
    2964:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	89 83       	std	Y+1, r24	; 0x01
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	ab 83       	std	Y+3, r26	; 0x03
    2972:	bc 83       	std	Y+4, r27	; 0x04
	}



	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    2974:	8b 85       	ldd	r24, Y+11	; 0x0b
    2976:	9c 85       	ldd	r25, Y+12	; 0x0c
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	9c 87       	std	Y+12, r25	; 0x0c
    297c:	8b 87       	std	Y+11, r24	; 0x0b
    297e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2980:	3f 85       	ldd	r19, Y+15	; 0x0f
    2982:	8b 85       	ldd	r24, Y+11	; 0x0b
    2984:	9c 85       	ldd	r25, Y+12	; 0x0c
    2986:	f9 01       	movw	r30, r18
    2988:	e8 0f       	add	r30, r24
    298a:	f9 1f       	adc	r31, r25
    298c:	80 81       	ld	r24, Z
    298e:	88 23       	and	r24, r24
    2990:	09 f0       	breq	.+2      	; 0x2994 <GLCD_String+0x4d0>
    2992:	df cd       	rjmp	.-1090   	; 0x2552 <GLCD_String+0x8e>
				GLCD_Command((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40);	/* Set Y address (column=0) */
    2994:	80 e4       	ldi	r24, 0x40	; 64
    2996:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GLCD_Command>
}
    299a:	60 96       	adiw	r28, 0x10	; 16
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	1f 91       	pop	r17
    29ac:	0f 91       	pop	r16
    29ae:	08 95       	ret

000029b0 <PWM_Drawer_internal_init>:
extern int duty;

/* If you use internal MC PWM "Timer0" use this function to initiation the APP */

void PWM_Drawer_internal_init(uint8 mode,uint8 freq,uint8 duty)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <PWM_Drawer_internal_init+0x6>
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	6a 83       	std	Y+2, r22	; 0x02
    29c0:	4b 83       	std	Y+3, r20	; 0x03
	GLCD_Init();
    29c2:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <GLCD_Init>
	GLCD_ClearAll();
    29c6:	0e 94 27 12 	call	0x244e	; 0x244e <GLCD_ClearAll>
	PWM_Start(mode,freq);
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	6a 81       	ldd	r22, Y+2	; 0x02
    29ce:	0e 94 17 07 	call	0xe2e	; 0xe2e <PWM_Start>
	PWM_SetDuty(duty);
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	0e 94 3a 07 	call	0xe74	; 0xe74 <PWM_SetDuty>
}
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <PWM_Drawer_external_init>:

/* if u use external PWM Signal Source use this function to initiation the APP */

void PWM_Drawer_external_init(void)
{
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
	GLCD_Init();
    29ec:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <GLCD_Init>
	GLCD_ClearAll();
    29f0:	0e 94 27 12 	call	0x244e	; 0x244e <GLCD_ClearAll>
}
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <PWM_Draw_Signal>:

/* Use this Function to Draw a Signal Waveform anywise intrenal or external */

void PWM_Draw_Signal(void)
{
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	c9 54       	subi	r28, 0x49	; 73
    2a08:	d0 40       	sbci	r29, 0x00	; 0
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
	int pereidon=0;
    2a14:	1a 8a       	std	Y+18, r1	; 0x12
    2a16:	19 8a       	std	Y+17, r1	; 0x11
	int pereidoff=0;
    2a18:	18 8a       	std	Y+16, r1	; 0x10
    2a1a:	1f 86       	std	Y+15, r1	; 0x0f
	/* Start time arrow */

	char arrow[15]={0};
    2a1c:	8f e0       	ldi	r24, 0x0F	; 15
    2a1e:	fe 01       	movw	r30, r28
    2a20:	73 96       	adiw	r30, 0x13	; 19
    2a22:	df 01       	movw	r26, r30
    2a24:	98 2f       	mov	r25, r24
    2a26:	1d 92       	st	X+, r1
    2a28:	9a 95       	dec	r25
    2a2a:	e9 f7       	brne	.-6      	; 0x2a26 <PWM_Draw_Signal+0x2c>
	strcat(arrow,"<"); // left arrow
    2a2c:	8e 01       	movw	r16, r28
    2a2e:	0d 5e       	subi	r16, 0xED	; 237
    2a30:	1f 4f       	sbci	r17, 0xFF	; 255
    2a32:	ce 01       	movw	r24, r28
    2a34:	43 96       	adiw	r24, 0x13	; 19
    2a36:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <strlen>
    2a3a:	80 0f       	add	r24, r16
    2a3c:	91 1f       	adc	r25, r17
    2a3e:	25 ee       	ldi	r18, 0xE5	; 229
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	b9 01       	movw	r22, r18
    2a44:	42 e0       	ldi	r20, 0x02	; 2
    2a46:	50 e0       	ldi	r21, 0x00	; 0
    2a48:	0e 94 dd 16 	call	0x2dba	; 0x2dba <memcpy>



	/* Start square wave */
	char pulse [40];
	strcat(pulse,"-");	//rising edge
    2a4c:	8e 01       	movw	r16, r28
    2a4e:	0e 5d       	subi	r16, 0xDE	; 222
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	ce 01       	movw	r24, r28
    2a54:	82 96       	adiw	r24, 0x22	; 34
    2a56:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <strlen>
    2a5a:	80 0f       	add	r24, r16
    2a5c:	91 1f       	adc	r25, r17
    2a5e:	27 ee       	ldi	r18, 0xE7	; 231
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	b9 01       	movw	r22, r18
    2a64:	42 e0       	ldi	r20, 0x02	; 2
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	0e 94 dd 16 	call	0x2dba	; 0x2dba <memcpy>



	/* This loop in order to Generate the waves
	is completely synchronized with the duty and the time of on and off */
	for (uint32 i = 0;i<2;i++)
    2a6c:	1b 86       	std	Y+11, r1	; 0x0b
    2a6e:	1c 86       	std	Y+12, r1	; 0x0c
    2a70:	1d 86       	std	Y+13, r1	; 0x0d
    2a72:	1e 86       	std	Y+14, r1	; 0x0e
    2a74:	aa c0       	rjmp	.+340    	; 0x2bca <PWM_Draw_Signal+0x1d0>
	{
		for (uint32 j=0;j<(duty/10);j++)
    2a76:	1f 82       	std	Y+7, r1	; 0x07
    2a78:	18 86       	std	Y+8, r1	; 0x08
    2a7a:	19 86       	std	Y+9, r1	; 0x09
    2a7c:	1a 86       	std	Y+10, r1	; 0x0a
    2a7e:	20 c0       	rjmp	.+64     	; 0x2ac0 <PWM_Draw_Signal+0xc6>
		{
			strcat(pulse,"-");	//on time
    2a80:	8e 01       	movw	r16, r28
    2a82:	0e 5d       	subi	r16, 0xDE	; 222
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	ce 01       	movw	r24, r28
    2a88:	82 96       	adiw	r24, 0x22	; 34
    2a8a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <strlen>
    2a8e:	80 0f       	add	r24, r16
    2a90:	91 1f       	adc	r25, r17
    2a92:	27 ee       	ldi	r18, 0xE7	; 231
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	b9 01       	movw	r22, r18
    2a98:	42 e0       	ldi	r20, 0x02	; 2
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <memcpy>
			pereidon++;
    2aa0:	89 89       	ldd	r24, Y+17	; 0x11
    2aa2:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	9a 8b       	std	Y+18, r25	; 0x12
    2aa8:	89 8b       	std	Y+17, r24	; 0x11

	/* This loop in order to Generate the waves
	is completely synchronized with the duty and the time of on and off */
	for (uint32 i = 0;i<2;i++)
	{
		for (uint32 j=0;j<(duty/10);j++)
    2aaa:	8f 81       	ldd	r24, Y+7	; 0x07
    2aac:	98 85       	ldd	r25, Y+8	; 0x08
    2aae:	a9 85       	ldd	r26, Y+9	; 0x09
    2ab0:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ab2:	01 96       	adiw	r24, 0x01	; 1
    2ab4:	a1 1d       	adc	r26, r1
    2ab6:	b1 1d       	adc	r27, r1
    2ab8:	8f 83       	std	Y+7, r24	; 0x07
    2aba:	98 87       	std	Y+8, r25	; 0x08
    2abc:	a9 87       	std	Y+9, r26	; 0x09
    2abe:	ba 87       	std	Y+10, r27	; 0x0a
    2ac0:	80 91 d6 03 	lds	r24, 0x03D6
    2ac4:	90 91 d7 03 	lds	r25, 0x03D7
    2ac8:	2a e0       	ldi	r18, 0x0A	; 10
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	b9 01       	movw	r22, r18
    2ace:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__divmodhi4>
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	9c 01       	movw	r18, r24
    2ad6:	44 27       	eor	r20, r20
    2ad8:	37 fd       	sbrc	r19, 7
    2ada:	40 95       	com	r20
    2adc:	54 2f       	mov	r21, r20
    2ade:	8f 81       	ldd	r24, Y+7	; 0x07
    2ae0:	98 85       	ldd	r25, Y+8	; 0x08
    2ae2:	a9 85       	ldd	r26, Y+9	; 0x09
    2ae4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ae6:	82 17       	cp	r24, r18
    2ae8:	93 07       	cpc	r25, r19
    2aea:	a4 07       	cpc	r26, r20
    2aec:	b5 07       	cpc	r27, r21
    2aee:	40 f2       	brcs	.-112    	; 0x2a80 <PWM_Draw_Signal+0x86>
		{
			strcat(pulse,"-");	//on time
			pereidon++;
		}
		strcat(pulse,"_");	//falling edge
    2af0:	8e 01       	movw	r16, r28
    2af2:	0e 5d       	subi	r16, 0xDE	; 222
    2af4:	1f 4f       	sbci	r17, 0xFF	; 255
    2af6:	ce 01       	movw	r24, r28
    2af8:	82 96       	adiw	r24, 0x22	; 34
    2afa:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <strlen>
    2afe:	80 0f       	add	r24, r16
    2b00:	91 1f       	adc	r25, r17
    2b02:	29 ee       	ldi	r18, 0xE9	; 233
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	b9 01       	movw	r22, r18
    2b08:	42 e0       	ldi	r20, 0x02	; 2
    2b0a:	50 e0       	ldi	r21, 0x00	; 0
    2b0c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <memcpy>
		for (uint32 k=0;k<(10-(duty/10));k++)
    2b10:	1b 82       	std	Y+3, r1	; 0x03
    2b12:	1c 82       	std	Y+4, r1	; 0x04
    2b14:	1d 82       	std	Y+5, r1	; 0x05
    2b16:	1e 82       	std	Y+6, r1	; 0x06
    2b18:	20 c0       	rjmp	.+64     	; 0x2b5a <PWM_Draw_Signal+0x160>
		{
			strcat(pulse,"_"); // off time
    2b1a:	8e 01       	movw	r16, r28
    2b1c:	0e 5d       	subi	r16, 0xDE	; 222
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	ce 01       	movw	r24, r28
    2b22:	82 96       	adiw	r24, 0x22	; 34
    2b24:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <strlen>
    2b28:	80 0f       	add	r24, r16
    2b2a:	91 1f       	adc	r25, r17
    2b2c:	29 ee       	ldi	r18, 0xE9	; 233
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	b9 01       	movw	r22, r18
    2b32:	42 e0       	ldi	r20, 0x02	; 2
    2b34:	50 e0       	ldi	r21, 0x00	; 0
    2b36:	0e 94 dd 16 	call	0x2dba	; 0x2dba <memcpy>
			pereidoff++;
    2b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b3c:	98 89       	ldd	r25, Y+16	; 0x10
    2b3e:	01 96       	adiw	r24, 0x01	; 1
    2b40:	98 8b       	std	Y+16, r25	; 0x10
    2b42:	8f 87       	std	Y+15, r24	; 0x0f
		{
			strcat(pulse,"-");	//on time
			pereidon++;
		}
		strcat(pulse,"_");	//falling edge
		for (uint32 k=0;k<(10-(duty/10));k++)
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	ad 81       	ldd	r26, Y+5	; 0x05
    2b4a:	be 81       	ldd	r27, Y+6	; 0x06
    2b4c:	01 96       	adiw	r24, 0x01	; 1
    2b4e:	a1 1d       	adc	r26, r1
    2b50:	b1 1d       	adc	r27, r1
    2b52:	8b 83       	std	Y+3, r24	; 0x03
    2b54:	9c 83       	std	Y+4, r25	; 0x04
    2b56:	ad 83       	std	Y+5, r26	; 0x05
    2b58:	be 83       	std	Y+6, r27	; 0x06
    2b5a:	80 91 d6 03 	lds	r24, 0x03D6
    2b5e:	90 91 d7 03 	lds	r25, 0x03D7
    2b62:	2a e0       	ldi	r18, 0x0A	; 10
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	b9 01       	movw	r22, r18
    2b68:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__divmodhi4>
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9c 01       	movw	r18, r24
    2b70:	8a e0       	ldi	r24, 0x0A	; 10
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	82 1b       	sub	r24, r18
    2b76:	93 0b       	sbc	r25, r19
    2b78:	9c 01       	movw	r18, r24
    2b7a:	44 27       	eor	r20, r20
    2b7c:	37 fd       	sbrc	r19, 7
    2b7e:	40 95       	com	r20
    2b80:	54 2f       	mov	r21, r20
    2b82:	8b 81       	ldd	r24, Y+3	; 0x03
    2b84:	9c 81       	ldd	r25, Y+4	; 0x04
    2b86:	ad 81       	ldd	r26, Y+5	; 0x05
    2b88:	be 81       	ldd	r27, Y+6	; 0x06
    2b8a:	82 17       	cp	r24, r18
    2b8c:	93 07       	cpc	r25, r19
    2b8e:	a4 07       	cpc	r26, r20
    2b90:	b5 07       	cpc	r27, r21
    2b92:	18 f2       	brcs	.-122    	; 0x2b1a <PWM_Draw_Signal+0x120>
		{
			strcat(pulse,"_"); // off time
			pereidoff++;
		}
		strcat(pulse,"-");	// rising edge
    2b94:	8e 01       	movw	r16, r28
    2b96:	0e 5d       	subi	r16, 0xDE	; 222
    2b98:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	82 96       	adiw	r24, 0x22	; 34
    2b9e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <strlen>
    2ba2:	80 0f       	add	r24, r16
    2ba4:	91 1f       	adc	r25, r17
    2ba6:	27 ee       	ldi	r18, 0xE7	; 231
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	b9 01       	movw	r22, r18
    2bac:	42 e0       	ldi	r20, 0x02	; 2
    2bae:	50 e0       	ldi	r21, 0x00	; 0
    2bb0:	0e 94 dd 16 	call	0x2dba	; 0x2dba <memcpy>



	/* This loop in order to Generate the waves
	is completely synchronized with the duty and the time of on and off */
	for (uint32 i = 0;i<2;i++)
    2bb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bb8:	ad 85       	ldd	r26, Y+13	; 0x0d
    2bba:	be 85       	ldd	r27, Y+14	; 0x0e
    2bbc:	01 96       	adiw	r24, 0x01	; 1
    2bbe:	a1 1d       	adc	r26, r1
    2bc0:	b1 1d       	adc	r27, r1
    2bc2:	8b 87       	std	Y+11, r24	; 0x0b
    2bc4:	9c 87       	std	Y+12, r25	; 0x0c
    2bc6:	ad 87       	std	Y+13, r26	; 0x0d
    2bc8:	be 87       	std	Y+14, r27	; 0x0e
    2bca:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bcc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bce:	ad 85       	ldd	r26, Y+13	; 0x0d
    2bd0:	be 85       	ldd	r27, Y+14	; 0x0e
    2bd2:	82 30       	cpi	r24, 0x02	; 2
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	a1 05       	cpc	r26, r1
    2bd8:	b1 05       	cpc	r27, r1
    2bda:	08 f4       	brcc	.+2      	; 0x2bde <PWM_Draw_Signal+0x1e4>
    2bdc:	4c cf       	rjmp	.-360    	; 0x2a76 <PWM_Draw_Signal+0x7c>
		strcat(pulse,"-");	// rising edge
	}


	/* This loop made To make the arrow completely in sync with the cycle time */
	for(int i=(pereidon+pereidoff)/5;i>0;i--)
    2bde:	29 89       	ldd	r18, Y+17	; 0x11
    2be0:	3a 89       	ldd	r19, Y+18	; 0x12
    2be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be4:	98 89       	ldd	r25, Y+16	; 0x10
    2be6:	82 0f       	add	r24, r18
    2be8:	93 1f       	adc	r25, r19
    2bea:	25 e0       	ldi	r18, 0x05	; 5
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	b9 01       	movw	r22, r18
    2bf0:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__divmodhi4>
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9a 83       	std	Y+2, r25	; 0x02
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	15 c0       	rjmp	.+42     	; 0x2c26 <PWM_Draw_Signal+0x22c>
	{
		strcat(arrow,"-"); // arrow body
    2bfc:	8e 01       	movw	r16, r28
    2bfe:	0d 5e       	subi	r16, 0xED	; 237
    2c00:	1f 4f       	sbci	r17, 0xFF	; 255
    2c02:	ce 01       	movw	r24, r28
    2c04:	43 96       	adiw	r24, 0x13	; 19
    2c06:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <strlen>
    2c0a:	80 0f       	add	r24, r16
    2c0c:	91 1f       	adc	r25, r17
    2c0e:	27 ee       	ldi	r18, 0xE7	; 231
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	b9 01       	movw	r22, r18
    2c14:	42 e0       	ldi	r20, 0x02	; 2
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	0e 94 dd 16 	call	0x2dba	; 0x2dba <memcpy>
		strcat(pulse,"-");	// rising edge
	}


	/* This loop made To make the arrow completely in sync with the cycle time */
	for(int i=(pereidon+pereidoff)/5;i>0;i--)
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9a 83       	std	Y+2, r25	; 0x02
    2c24:	89 83       	std	Y+1, r24	; 0x01
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2a:	18 16       	cp	r1, r24
    2c2c:	19 06       	cpc	r1, r25
    2c2e:	34 f3       	brlt	.-52     	; 0x2bfc <PWM_Draw_Signal+0x202>
	{
		strcat(arrow,"-"); // arrow body
	}
	strcat(arrow,">"); // right arrow
    2c30:	8e 01       	movw	r16, r28
    2c32:	0d 5e       	subi	r16, 0xED	; 237
    2c34:	1f 4f       	sbci	r17, 0xFF	; 255
    2c36:	ce 01       	movw	r24, r28
    2c38:	43 96       	adiw	r24, 0x13	; 19
    2c3a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <strlen>
    2c3e:	80 0f       	add	r24, r16
    2c40:	91 1f       	adc	r25, r17
    2c42:	2b ee       	ldi	r18, 0xEB	; 235
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	b9 01       	movw	r22, r18
    2c48:	42 e0       	ldi	r20, 0x02	; 2
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <memcpy>

	GLCD_String(6,arrow,Left); /* Display arrow */
    2c50:	9e 01       	movw	r18, r28
    2c52:	2d 5e       	subi	r18, 0xED	; 237
    2c54:	3f 4f       	sbci	r19, 0xFF	; 255
    2c56:	86 e0       	ldi	r24, 0x06	; 6
    2c58:	b9 01       	movw	r22, r18
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GLCD_String>
	GLCD_String(7,pulse,Left); /* Display squareWave */
    2c60:	9e 01       	movw	r18, r28
    2c62:	2e 5d       	subi	r18, 0xDE	; 222
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	87 e0       	ldi	r24, 0x07	; 7
    2c68:	b9 01       	movw	r22, r18
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GLCD_String>

}
    2c70:	c7 5b       	subi	r28, 0xB7	; 183
    2c72:	df 4f       	sbci	r29, 0xFF	; 255
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	08 95       	ret

00002c88 <PWM_Get_Signal>:

/* Use this function to Get all 3 the PWM signal parameters Duty frequency and period time */

void PWM_Get_Signal(void)
{
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
	ICU_GetPWM();
    2c90:	0e 94 4d 08 	call	0x109a	; 0x109a <ICU_GetPWM>
}
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <main>:

// ClockValue_16000KHZ			>> 62.5 KHz
// ClockValue_2000KHZ			>> 7.8	KHZ

int main(void)
{
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
	/* Internal PWM SIGNAl */

    PWM_Drawer_internal_init(Timer0FastPWM,ClockValue_16000KHZ,80);
    2ca2:	88 e6       	ldi	r24, 0x68	; 104
    2ca4:	61 e0       	ldi	r22, 0x01	; 1
    2ca6:	40 e5       	ldi	r20, 0x50	; 80
    2ca8:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <PWM_Drawer_internal_init>

	/* External PWM SIGNAl */

	PWM_Drawer_external_init();
    2cac:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <PWM_Drawer_external_init>

    while (1)
    {
		PWM_Get_Signal();	//Signal measurement
    2cb0:	0e 94 44 16 	call	0x2c88	; 0x2c88 <PWM_Get_Signal>
		PWM_Draw_Signal();	//Sign drawing
    2cb4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <PWM_Draw_Signal>
    2cb8:	fb cf       	rjmp	.-10     	; 0x2cb0 <main+0x16>

00002cba <__divmodhi4>:
    2cba:	97 fb       	bst	r25, 7
    2cbc:	09 2e       	mov	r0, r25
    2cbe:	07 26       	eor	r0, r23
    2cc0:	0a d0       	rcall	.+20     	; 0x2cd6 <__divmodhi4_neg1>
    2cc2:	77 fd       	sbrc	r23, 7
    2cc4:	04 d0       	rcall	.+8      	; 0x2cce <__divmodhi4_neg2>
    2cc6:	2e d0       	rcall	.+92     	; 0x2d24 <__udivmodhi4>
    2cc8:	06 d0       	rcall	.+12     	; 0x2cd6 <__divmodhi4_neg1>
    2cca:	00 20       	and	r0, r0
    2ccc:	1a f4       	brpl	.+6      	; 0x2cd4 <__divmodhi4_exit>

00002cce <__divmodhi4_neg2>:
    2cce:	70 95       	com	r23
    2cd0:	61 95       	neg	r22
    2cd2:	7f 4f       	sbci	r23, 0xFF	; 255

00002cd4 <__divmodhi4_exit>:
    2cd4:	08 95       	ret

00002cd6 <__divmodhi4_neg1>:
    2cd6:	f6 f7       	brtc	.-4      	; 0x2cd4 <__divmodhi4_exit>
    2cd8:	90 95       	com	r25
    2cda:	81 95       	neg	r24
    2cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cde:	08 95       	ret

00002ce0 <__udivmodsi4>:
    2ce0:	a1 e2       	ldi	r26, 0x21	; 33
    2ce2:	1a 2e       	mov	r1, r26
    2ce4:	aa 1b       	sub	r26, r26
    2ce6:	bb 1b       	sub	r27, r27
    2ce8:	fd 01       	movw	r30, r26
    2cea:	0d c0       	rjmp	.+26     	; 0x2d06 <__udivmodsi4_ep>

00002cec <__udivmodsi4_loop>:
    2cec:	aa 1f       	adc	r26, r26
    2cee:	bb 1f       	adc	r27, r27
    2cf0:	ee 1f       	adc	r30, r30
    2cf2:	ff 1f       	adc	r31, r31
    2cf4:	a2 17       	cp	r26, r18
    2cf6:	b3 07       	cpc	r27, r19
    2cf8:	e4 07       	cpc	r30, r20
    2cfa:	f5 07       	cpc	r31, r21
    2cfc:	20 f0       	brcs	.+8      	; 0x2d06 <__udivmodsi4_ep>
    2cfe:	a2 1b       	sub	r26, r18
    2d00:	b3 0b       	sbc	r27, r19
    2d02:	e4 0b       	sbc	r30, r20
    2d04:	f5 0b       	sbc	r31, r21

00002d06 <__udivmodsi4_ep>:
    2d06:	66 1f       	adc	r22, r22
    2d08:	77 1f       	adc	r23, r23
    2d0a:	88 1f       	adc	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	1a 94       	dec	r1
    2d10:	69 f7       	brne	.-38     	; 0x2cec <__udivmodsi4_loop>
    2d12:	60 95       	com	r22
    2d14:	70 95       	com	r23
    2d16:	80 95       	com	r24
    2d18:	90 95       	com	r25
    2d1a:	9b 01       	movw	r18, r22
    2d1c:	ac 01       	movw	r20, r24
    2d1e:	bd 01       	movw	r22, r26
    2d20:	cf 01       	movw	r24, r30
    2d22:	08 95       	ret

00002d24 <__udivmodhi4>:
    2d24:	aa 1b       	sub	r26, r26
    2d26:	bb 1b       	sub	r27, r27
    2d28:	51 e1       	ldi	r21, 0x11	; 17
    2d2a:	07 c0       	rjmp	.+14     	; 0x2d3a <__udivmodhi4_ep>

00002d2c <__udivmodhi4_loop>:
    2d2c:	aa 1f       	adc	r26, r26
    2d2e:	bb 1f       	adc	r27, r27
    2d30:	a6 17       	cp	r26, r22
    2d32:	b7 07       	cpc	r27, r23
    2d34:	10 f0       	brcs	.+4      	; 0x2d3a <__udivmodhi4_ep>
    2d36:	a6 1b       	sub	r26, r22
    2d38:	b7 0b       	sbc	r27, r23

00002d3a <__udivmodhi4_ep>:
    2d3a:	88 1f       	adc	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	5a 95       	dec	r21
    2d40:	a9 f7       	brne	.-22     	; 0x2d2c <__udivmodhi4_loop>
    2d42:	80 95       	com	r24
    2d44:	90 95       	com	r25
    2d46:	bc 01       	movw	r22, r24
    2d48:	cd 01       	movw	r24, r26
    2d4a:	08 95       	ret

00002d4c <__prologue_saves__>:
    2d4c:	2f 92       	push	r2
    2d4e:	3f 92       	push	r3
    2d50:	4f 92       	push	r4
    2d52:	5f 92       	push	r5
    2d54:	6f 92       	push	r6
    2d56:	7f 92       	push	r7
    2d58:	8f 92       	push	r8
    2d5a:	9f 92       	push	r9
    2d5c:	af 92       	push	r10
    2d5e:	bf 92       	push	r11
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	ca 1b       	sub	r28, r26
    2d76:	db 0b       	sbc	r29, r27
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	09 94       	ijmp

00002d84 <__epilogue_restores__>:
    2d84:	2a 88       	ldd	r2, Y+18	; 0x12
    2d86:	39 88       	ldd	r3, Y+17	; 0x11
    2d88:	48 88       	ldd	r4, Y+16	; 0x10
    2d8a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d8c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d8e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d90:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d92:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d94:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d96:	b9 84       	ldd	r11, Y+9	; 0x09
    2d98:	c8 84       	ldd	r12, Y+8	; 0x08
    2d9a:	df 80       	ldd	r13, Y+7	; 0x07
    2d9c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d9e:	fd 80       	ldd	r15, Y+5	; 0x05
    2da0:	0c 81       	ldd	r16, Y+4	; 0x04
    2da2:	1b 81       	ldd	r17, Y+3	; 0x03
    2da4:	aa 81       	ldd	r26, Y+2	; 0x02
    2da6:	b9 81       	ldd	r27, Y+1	; 0x01
    2da8:	ce 0f       	add	r28, r30
    2daa:	d1 1d       	adc	r29, r1
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	ed 01       	movw	r28, r26
    2db8:	08 95       	ret

00002dba <memcpy>:
    2dba:	fb 01       	movw	r30, r22
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <memcpy+0xa>
    2dc0:	01 90       	ld	r0, Z+
    2dc2:	0d 92       	st	X+, r0
    2dc4:	41 50       	subi	r20, 0x01	; 1
    2dc6:	50 40       	sbci	r21, 0x00	; 0
    2dc8:	d8 f7       	brcc	.-10     	; 0x2dc0 <memcpy+0x6>
    2dca:	08 95       	ret

00002dcc <strcat>:
    2dcc:	fb 01       	movw	r30, r22
    2dce:	dc 01       	movw	r26, r24
    2dd0:	0d 90       	ld	r0, X+
    2dd2:	00 20       	and	r0, r0
    2dd4:	e9 f7       	brne	.-6      	; 0x2dd0 <strcat+0x4>
    2dd6:	11 97       	sbiw	r26, 0x01	; 1
    2dd8:	01 90       	ld	r0, Z+
    2dda:	0d 92       	st	X+, r0
    2ddc:	00 20       	and	r0, r0
    2dde:	e1 f7       	brne	.-8      	; 0x2dd8 <strcat+0xc>
    2de0:	08 95       	ret

00002de2 <strlen>:
    2de2:	fc 01       	movw	r30, r24
    2de4:	01 90       	ld	r0, Z+
    2de6:	00 20       	and	r0, r0
    2de8:	e9 f7       	brne	.-6      	; 0x2de4 <strlen+0x2>
    2dea:	80 95       	com	r24
    2dec:	90 95       	com	r25
    2dee:	8e 0f       	add	r24, r30
    2df0:	9f 1f       	adc	r25, r31
    2df2:	08 95       	ret

00002df4 <ltoa>:
    2df4:	fa 01       	movw	r30, r20
    2df6:	cf 93       	push	r28
    2df8:	ff 93       	push	r31
    2dfa:	ef 93       	push	r30
    2dfc:	22 30       	cpi	r18, 0x02	; 2
    2dfe:	44 f1       	brlt	.+80     	; 0x2e50 <ltoa+0x5c>
    2e00:	25 32       	cpi	r18, 0x25	; 37
    2e02:	34 f5       	brge	.+76     	; 0x2e50 <ltoa+0x5c>
    2e04:	c2 2f       	mov	r28, r18
    2e06:	e8 94       	clt
    2e08:	ca 30       	cpi	r28, 0x0A	; 10
    2e0a:	49 f4       	brne	.+18     	; 0x2e1e <ltoa+0x2a>
    2e0c:	97 fb       	bst	r25, 7
    2e0e:	3e f4       	brtc	.+14     	; 0x2e1e <ltoa+0x2a>
    2e10:	90 95       	com	r25
    2e12:	80 95       	com	r24
    2e14:	70 95       	com	r23
    2e16:	61 95       	neg	r22
    2e18:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1e:	2c 2f       	mov	r18, r28
    2e20:	33 27       	eor	r19, r19
    2e22:	44 27       	eor	r20, r20
    2e24:	55 27       	eor	r21, r21
    2e26:	ff 93       	push	r31
    2e28:	ef 93       	push	r30
    2e2a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__udivmodsi4>
    2e2e:	ef 91       	pop	r30
    2e30:	ff 91       	pop	r31
    2e32:	60 5d       	subi	r22, 0xD0	; 208
    2e34:	6a 33       	cpi	r22, 0x3A	; 58
    2e36:	0c f0       	brlt	.+2      	; 0x2e3a <ltoa+0x46>
    2e38:	69 5d       	subi	r22, 0xD9	; 217
    2e3a:	61 93       	st	Z+, r22
    2e3c:	b9 01       	movw	r22, r18
    2e3e:	ca 01       	movw	r24, r20
    2e40:	60 50       	subi	r22, 0x00	; 0
    2e42:	70 40       	sbci	r23, 0x00	; 0
    2e44:	80 40       	sbci	r24, 0x00	; 0
    2e46:	90 40       	sbci	r25, 0x00	; 0
    2e48:	51 f7       	brne	.-44     	; 0x2e1e <ltoa+0x2a>
    2e4a:	16 f4       	brtc	.+4      	; 0x2e50 <ltoa+0x5c>
    2e4c:	cd e2       	ldi	r28, 0x2D	; 45
    2e4e:	c1 93       	st	Z+, r28
    2e50:	10 82       	st	Z, r1
    2e52:	8f 91       	pop	r24
    2e54:	9f 91       	pop	r25
    2e56:	cf 91       	pop	r28
    2e58:	0c 94 45 19 	jmp	0x328a	; 0x328a <strrev>

00002e5c <sprintf>:
    2e5c:	ae e0       	ldi	r26, 0x0E	; 14
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	e4 e3       	ldi	r30, 0x34	; 52
    2e62:	f7 e1       	ldi	r31, 0x17	; 23
    2e64:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__prologue_saves__+0x1c>
    2e68:	0d 89       	ldd	r16, Y+21	; 0x15
    2e6a:	1e 89       	ldd	r17, Y+22	; 0x16
    2e6c:	86 e0       	ldi	r24, 0x06	; 6
    2e6e:	8c 83       	std	Y+4, r24	; 0x04
    2e70:	1a 83       	std	Y+2, r17	; 0x02
    2e72:	09 83       	std	Y+1, r16	; 0x01
    2e74:	8f ef       	ldi	r24, 0xFF	; 255
    2e76:	9f e7       	ldi	r25, 0x7F	; 127
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
    2e7c:	9e 01       	movw	r18, r28
    2e7e:	27 5e       	subi	r18, 0xE7	; 231
    2e80:	3f 4f       	sbci	r19, 0xFF	; 255
    2e82:	ce 01       	movw	r24, r28
    2e84:	01 96       	adiw	r24, 0x01	; 1
    2e86:	6f 89       	ldd	r22, Y+23	; 0x17
    2e88:	78 8d       	ldd	r23, Y+24	; 0x18
    2e8a:	a9 01       	movw	r20, r18
    2e8c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <vfprintf>
    2e90:	2f 81       	ldd	r18, Y+7	; 0x07
    2e92:	38 85       	ldd	r19, Y+8	; 0x08
    2e94:	02 0f       	add	r16, r18
    2e96:	13 1f       	adc	r17, r19
    2e98:	f8 01       	movw	r30, r16
    2e9a:	10 82       	st	Z, r1
    2e9c:	2e 96       	adiw	r28, 0x0e	; 14
    2e9e:	e4 e0       	ldi	r30, 0x04	; 4
    2ea0:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__epilogue_restores__+0x1c>

00002ea4 <vfprintf>:
    2ea4:	ab e0       	ldi	r26, 0x0B	; 11
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e8 e5       	ldi	r30, 0x58	; 88
    2eaa:	f7 e1       	ldi	r31, 0x17	; 23
    2eac:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__>
    2eb0:	3c 01       	movw	r6, r24
    2eb2:	2b 01       	movw	r4, r22
    2eb4:	5a 01       	movw	r10, r20
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	17 82       	std	Z+7, r1	; 0x07
    2eba:	16 82       	std	Z+6, r1	; 0x06
    2ebc:	83 81       	ldd	r24, Z+3	; 0x03
    2ebe:	81 fd       	sbrc	r24, 1
    2ec0:	03 c0       	rjmp	.+6      	; 0x2ec8 <vfprintf+0x24>
    2ec2:	6f ef       	ldi	r22, 0xFF	; 255
    2ec4:	7f ef       	ldi	r23, 0xFF	; 255
    2ec6:	c6 c1       	rjmp	.+908    	; 0x3254 <vfprintf+0x3b0>
    2ec8:	9a e0       	ldi	r25, 0x0A	; 10
    2eca:	89 2e       	mov	r8, r25
    2ecc:	1e 01       	movw	r2, r28
    2ece:	08 94       	sec
    2ed0:	21 1c       	adc	r2, r1
    2ed2:	31 1c       	adc	r3, r1
    2ed4:	f3 01       	movw	r30, r6
    2ed6:	23 81       	ldd	r18, Z+3	; 0x03
    2ed8:	f2 01       	movw	r30, r4
    2eda:	23 fd       	sbrc	r18, 3
    2edc:	85 91       	lpm	r24, Z+
    2ede:	23 ff       	sbrs	r18, 3
    2ee0:	81 91       	ld	r24, Z+
    2ee2:	2f 01       	movw	r4, r30
    2ee4:	88 23       	and	r24, r24
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <vfprintf+0x46>
    2ee8:	b2 c1       	rjmp	.+868    	; 0x324e <vfprintf+0x3aa>
    2eea:	85 32       	cpi	r24, 0x25	; 37
    2eec:	39 f4       	brne	.+14     	; 0x2efc <vfprintf+0x58>
    2eee:	23 fd       	sbrc	r18, 3
    2ef0:	85 91       	lpm	r24, Z+
    2ef2:	23 ff       	sbrs	r18, 3
    2ef4:	81 91       	ld	r24, Z+
    2ef6:	2f 01       	movw	r4, r30
    2ef8:	85 32       	cpi	r24, 0x25	; 37
    2efa:	29 f4       	brne	.+10     	; 0x2f06 <vfprintf+0x62>
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	b3 01       	movw	r22, r6
    2f00:	0e 94 55 19 	call	0x32aa	; 0x32aa <fputc>
    2f04:	e7 cf       	rjmp	.-50     	; 0x2ed4 <vfprintf+0x30>
    2f06:	98 2f       	mov	r25, r24
    2f08:	ff 24       	eor	r15, r15
    2f0a:	ee 24       	eor	r14, r14
    2f0c:	99 24       	eor	r9, r9
    2f0e:	ff e1       	ldi	r31, 0x1F	; 31
    2f10:	ff 15       	cp	r31, r15
    2f12:	d0 f0       	brcs	.+52     	; 0x2f48 <vfprintf+0xa4>
    2f14:	9b 32       	cpi	r25, 0x2B	; 43
    2f16:	69 f0       	breq	.+26     	; 0x2f32 <vfprintf+0x8e>
    2f18:	9c 32       	cpi	r25, 0x2C	; 44
    2f1a:	28 f4       	brcc	.+10     	; 0x2f26 <vfprintf+0x82>
    2f1c:	90 32       	cpi	r25, 0x20	; 32
    2f1e:	59 f0       	breq	.+22     	; 0x2f36 <vfprintf+0x92>
    2f20:	93 32       	cpi	r25, 0x23	; 35
    2f22:	91 f4       	brne	.+36     	; 0x2f48 <vfprintf+0xa4>
    2f24:	0e c0       	rjmp	.+28     	; 0x2f42 <vfprintf+0x9e>
    2f26:	9d 32       	cpi	r25, 0x2D	; 45
    2f28:	49 f0       	breq	.+18     	; 0x2f3c <vfprintf+0x98>
    2f2a:	90 33       	cpi	r25, 0x30	; 48
    2f2c:	69 f4       	brne	.+26     	; 0x2f48 <vfprintf+0xa4>
    2f2e:	41 e0       	ldi	r20, 0x01	; 1
    2f30:	24 c0       	rjmp	.+72     	; 0x2f7a <vfprintf+0xd6>
    2f32:	52 e0       	ldi	r21, 0x02	; 2
    2f34:	f5 2a       	or	r15, r21
    2f36:	84 e0       	ldi	r24, 0x04	; 4
    2f38:	f8 2a       	or	r15, r24
    2f3a:	28 c0       	rjmp	.+80     	; 0x2f8c <vfprintf+0xe8>
    2f3c:	98 e0       	ldi	r25, 0x08	; 8
    2f3e:	f9 2a       	or	r15, r25
    2f40:	25 c0       	rjmp	.+74     	; 0x2f8c <vfprintf+0xe8>
    2f42:	e0 e1       	ldi	r30, 0x10	; 16
    2f44:	fe 2a       	or	r15, r30
    2f46:	22 c0       	rjmp	.+68     	; 0x2f8c <vfprintf+0xe8>
    2f48:	f7 fc       	sbrc	r15, 7
    2f4a:	29 c0       	rjmp	.+82     	; 0x2f9e <vfprintf+0xfa>
    2f4c:	89 2f       	mov	r24, r25
    2f4e:	80 53       	subi	r24, 0x30	; 48
    2f50:	8a 30       	cpi	r24, 0x0A	; 10
    2f52:	70 f4       	brcc	.+28     	; 0x2f70 <vfprintf+0xcc>
    2f54:	f6 fe       	sbrs	r15, 6
    2f56:	05 c0       	rjmp	.+10     	; 0x2f62 <vfprintf+0xbe>
    2f58:	98 9c       	mul	r9, r8
    2f5a:	90 2c       	mov	r9, r0
    2f5c:	11 24       	eor	r1, r1
    2f5e:	98 0e       	add	r9, r24
    2f60:	15 c0       	rjmp	.+42     	; 0x2f8c <vfprintf+0xe8>
    2f62:	e8 9c       	mul	r14, r8
    2f64:	e0 2c       	mov	r14, r0
    2f66:	11 24       	eor	r1, r1
    2f68:	e8 0e       	add	r14, r24
    2f6a:	f0 e2       	ldi	r31, 0x20	; 32
    2f6c:	ff 2a       	or	r15, r31
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <vfprintf+0xe8>
    2f70:	9e 32       	cpi	r25, 0x2E	; 46
    2f72:	29 f4       	brne	.+10     	; 0x2f7e <vfprintf+0xda>
    2f74:	f6 fc       	sbrc	r15, 6
    2f76:	6b c1       	rjmp	.+726    	; 0x324e <vfprintf+0x3aa>
    2f78:	40 e4       	ldi	r20, 0x40	; 64
    2f7a:	f4 2a       	or	r15, r20
    2f7c:	07 c0       	rjmp	.+14     	; 0x2f8c <vfprintf+0xe8>
    2f7e:	9c 36       	cpi	r25, 0x6C	; 108
    2f80:	19 f4       	brne	.+6      	; 0x2f88 <vfprintf+0xe4>
    2f82:	50 e8       	ldi	r21, 0x80	; 128
    2f84:	f5 2a       	or	r15, r21
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <vfprintf+0xe8>
    2f88:	98 36       	cpi	r25, 0x68	; 104
    2f8a:	49 f4       	brne	.+18     	; 0x2f9e <vfprintf+0xfa>
    2f8c:	f2 01       	movw	r30, r4
    2f8e:	23 fd       	sbrc	r18, 3
    2f90:	95 91       	lpm	r25, Z+
    2f92:	23 ff       	sbrs	r18, 3
    2f94:	91 91       	ld	r25, Z+
    2f96:	2f 01       	movw	r4, r30
    2f98:	99 23       	and	r25, r25
    2f9a:	09 f0       	breq	.+2      	; 0x2f9e <vfprintf+0xfa>
    2f9c:	b8 cf       	rjmp	.-144    	; 0x2f0e <vfprintf+0x6a>
    2f9e:	89 2f       	mov	r24, r25
    2fa0:	85 54       	subi	r24, 0x45	; 69
    2fa2:	83 30       	cpi	r24, 0x03	; 3
    2fa4:	18 f0       	brcs	.+6      	; 0x2fac <vfprintf+0x108>
    2fa6:	80 52       	subi	r24, 0x20	; 32
    2fa8:	83 30       	cpi	r24, 0x03	; 3
    2faa:	38 f4       	brcc	.+14     	; 0x2fba <vfprintf+0x116>
    2fac:	44 e0       	ldi	r20, 0x04	; 4
    2fae:	50 e0       	ldi	r21, 0x00	; 0
    2fb0:	a4 0e       	add	r10, r20
    2fb2:	b5 1e       	adc	r11, r21
    2fb4:	5f e3       	ldi	r21, 0x3F	; 63
    2fb6:	59 83       	std	Y+1, r21	; 0x01
    2fb8:	0f c0       	rjmp	.+30     	; 0x2fd8 <vfprintf+0x134>
    2fba:	93 36       	cpi	r25, 0x63	; 99
    2fbc:	31 f0       	breq	.+12     	; 0x2fca <vfprintf+0x126>
    2fbe:	93 37       	cpi	r25, 0x73	; 115
    2fc0:	79 f0       	breq	.+30     	; 0x2fe0 <vfprintf+0x13c>
    2fc2:	93 35       	cpi	r25, 0x53	; 83
    2fc4:	09 f0       	breq	.+2      	; 0x2fc8 <vfprintf+0x124>
    2fc6:	56 c0       	rjmp	.+172    	; 0x3074 <vfprintf+0x1d0>
    2fc8:	20 c0       	rjmp	.+64     	; 0x300a <vfprintf+0x166>
    2fca:	f5 01       	movw	r30, r10
    2fcc:	80 81       	ld	r24, Z
    2fce:	89 83       	std	Y+1, r24	; 0x01
    2fd0:	42 e0       	ldi	r20, 0x02	; 2
    2fd2:	50 e0       	ldi	r21, 0x00	; 0
    2fd4:	a4 0e       	add	r10, r20
    2fd6:	b5 1e       	adc	r11, r21
    2fd8:	61 01       	movw	r12, r2
    2fda:	01 e0       	ldi	r16, 0x01	; 1
    2fdc:	10 e0       	ldi	r17, 0x00	; 0
    2fde:	12 c0       	rjmp	.+36     	; 0x3004 <vfprintf+0x160>
    2fe0:	f5 01       	movw	r30, r10
    2fe2:	c0 80       	ld	r12, Z
    2fe4:	d1 80       	ldd	r13, Z+1	; 0x01
    2fe6:	f6 fc       	sbrc	r15, 6
    2fe8:	03 c0       	rjmp	.+6      	; 0x2ff0 <vfprintf+0x14c>
    2fea:	6f ef       	ldi	r22, 0xFF	; 255
    2fec:	7f ef       	ldi	r23, 0xFF	; 255
    2fee:	02 c0       	rjmp	.+4      	; 0x2ff4 <vfprintf+0x150>
    2ff0:	69 2d       	mov	r22, r9
    2ff2:	70 e0       	ldi	r23, 0x00	; 0
    2ff4:	42 e0       	ldi	r20, 0x02	; 2
    2ff6:	50 e0       	ldi	r21, 0x00	; 0
    2ff8:	a4 0e       	add	r10, r20
    2ffa:	b5 1e       	adc	r11, r21
    2ffc:	c6 01       	movw	r24, r12
    2ffe:	0e 94 3a 19 	call	0x3274	; 0x3274 <strnlen>
    3002:	8c 01       	movw	r16, r24
    3004:	5f e7       	ldi	r21, 0x7F	; 127
    3006:	f5 22       	and	r15, r21
    3008:	14 c0       	rjmp	.+40     	; 0x3032 <vfprintf+0x18e>
    300a:	f5 01       	movw	r30, r10
    300c:	c0 80       	ld	r12, Z
    300e:	d1 80       	ldd	r13, Z+1	; 0x01
    3010:	f6 fc       	sbrc	r15, 6
    3012:	03 c0       	rjmp	.+6      	; 0x301a <vfprintf+0x176>
    3014:	6f ef       	ldi	r22, 0xFF	; 255
    3016:	7f ef       	ldi	r23, 0xFF	; 255
    3018:	02 c0       	rjmp	.+4      	; 0x301e <vfprintf+0x17a>
    301a:	69 2d       	mov	r22, r9
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	42 e0       	ldi	r20, 0x02	; 2
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	a4 0e       	add	r10, r20
    3024:	b5 1e       	adc	r11, r21
    3026:	c6 01       	movw	r24, r12
    3028:	0e 94 2f 19 	call	0x325e	; 0x325e <strnlen_P>
    302c:	8c 01       	movw	r16, r24
    302e:	50 e8       	ldi	r21, 0x80	; 128
    3030:	f5 2a       	or	r15, r21
    3032:	f3 fe       	sbrs	r15, 3
    3034:	07 c0       	rjmp	.+14     	; 0x3044 <vfprintf+0x1a0>
    3036:	1a c0       	rjmp	.+52     	; 0x306c <vfprintf+0x1c8>
    3038:	80 e2       	ldi	r24, 0x20	; 32
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	b3 01       	movw	r22, r6
    303e:	0e 94 55 19 	call	0x32aa	; 0x32aa <fputc>
    3042:	ea 94       	dec	r14
    3044:	8e 2d       	mov	r24, r14
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	08 17       	cp	r16, r24
    304a:	19 07       	cpc	r17, r25
    304c:	a8 f3       	brcs	.-22     	; 0x3038 <vfprintf+0x194>
    304e:	0e c0       	rjmp	.+28     	; 0x306c <vfprintf+0x1c8>
    3050:	f6 01       	movw	r30, r12
    3052:	f7 fc       	sbrc	r15, 7
    3054:	85 91       	lpm	r24, Z+
    3056:	f7 fe       	sbrs	r15, 7
    3058:	81 91       	ld	r24, Z+
    305a:	6f 01       	movw	r12, r30
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	b3 01       	movw	r22, r6
    3060:	0e 94 55 19 	call	0x32aa	; 0x32aa <fputc>
    3064:	e1 10       	cpse	r14, r1
    3066:	ea 94       	dec	r14
    3068:	01 50       	subi	r16, 0x01	; 1
    306a:	10 40       	sbci	r17, 0x00	; 0
    306c:	01 15       	cp	r16, r1
    306e:	11 05       	cpc	r17, r1
    3070:	79 f7       	brne	.-34     	; 0x3050 <vfprintf+0x1ac>
    3072:	ea c0       	rjmp	.+468    	; 0x3248 <vfprintf+0x3a4>
    3074:	94 36       	cpi	r25, 0x64	; 100
    3076:	11 f0       	breq	.+4      	; 0x307c <vfprintf+0x1d8>
    3078:	99 36       	cpi	r25, 0x69	; 105
    307a:	69 f5       	brne	.+90     	; 0x30d6 <vfprintf+0x232>
    307c:	f7 fe       	sbrs	r15, 7
    307e:	08 c0       	rjmp	.+16     	; 0x3090 <vfprintf+0x1ec>
    3080:	f5 01       	movw	r30, r10
    3082:	20 81       	ld	r18, Z
    3084:	31 81       	ldd	r19, Z+1	; 0x01
    3086:	42 81       	ldd	r20, Z+2	; 0x02
    3088:	53 81       	ldd	r21, Z+3	; 0x03
    308a:	84 e0       	ldi	r24, 0x04	; 4
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	0a c0       	rjmp	.+20     	; 0x30a4 <vfprintf+0x200>
    3090:	f5 01       	movw	r30, r10
    3092:	80 81       	ld	r24, Z
    3094:	91 81       	ldd	r25, Z+1	; 0x01
    3096:	9c 01       	movw	r18, r24
    3098:	44 27       	eor	r20, r20
    309a:	37 fd       	sbrc	r19, 7
    309c:	40 95       	com	r20
    309e:	54 2f       	mov	r21, r20
    30a0:	82 e0       	ldi	r24, 0x02	; 2
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	a8 0e       	add	r10, r24
    30a6:	b9 1e       	adc	r11, r25
    30a8:	9f e6       	ldi	r25, 0x6F	; 111
    30aa:	f9 22       	and	r15, r25
    30ac:	57 ff       	sbrs	r21, 7
    30ae:	09 c0       	rjmp	.+18     	; 0x30c2 <vfprintf+0x21e>
    30b0:	50 95       	com	r21
    30b2:	40 95       	com	r20
    30b4:	30 95       	com	r19
    30b6:	21 95       	neg	r18
    30b8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ba:	4f 4f       	sbci	r20, 0xFF	; 255
    30bc:	5f 4f       	sbci	r21, 0xFF	; 255
    30be:	e0 e8       	ldi	r30, 0x80	; 128
    30c0:	fe 2a       	or	r15, r30
    30c2:	ca 01       	movw	r24, r20
    30c4:	b9 01       	movw	r22, r18
    30c6:	a1 01       	movw	r20, r2
    30c8:	2a e0       	ldi	r18, 0x0A	; 10
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	0e 94 81 19 	call	0x3302	; 0x3302 <__ultoa_invert>
    30d0:	d8 2e       	mov	r13, r24
    30d2:	d2 18       	sub	r13, r2
    30d4:	40 c0       	rjmp	.+128    	; 0x3156 <vfprintf+0x2b2>
    30d6:	95 37       	cpi	r25, 0x75	; 117
    30d8:	29 f4       	brne	.+10     	; 0x30e4 <vfprintf+0x240>
    30da:	1f 2d       	mov	r17, r15
    30dc:	1f 7e       	andi	r17, 0xEF	; 239
    30de:	2a e0       	ldi	r18, 0x0A	; 10
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	1d c0       	rjmp	.+58     	; 0x311e <vfprintf+0x27a>
    30e4:	1f 2d       	mov	r17, r15
    30e6:	19 7f       	andi	r17, 0xF9	; 249
    30e8:	9f 36       	cpi	r25, 0x6F	; 111
    30ea:	61 f0       	breq	.+24     	; 0x3104 <vfprintf+0x260>
    30ec:	90 37       	cpi	r25, 0x70	; 112
    30ee:	20 f4       	brcc	.+8      	; 0x30f8 <vfprintf+0x254>
    30f0:	98 35       	cpi	r25, 0x58	; 88
    30f2:	09 f0       	breq	.+2      	; 0x30f6 <vfprintf+0x252>
    30f4:	ac c0       	rjmp	.+344    	; 0x324e <vfprintf+0x3aa>
    30f6:	0f c0       	rjmp	.+30     	; 0x3116 <vfprintf+0x272>
    30f8:	90 37       	cpi	r25, 0x70	; 112
    30fa:	39 f0       	breq	.+14     	; 0x310a <vfprintf+0x266>
    30fc:	98 37       	cpi	r25, 0x78	; 120
    30fe:	09 f0       	breq	.+2      	; 0x3102 <vfprintf+0x25e>
    3100:	a6 c0       	rjmp	.+332    	; 0x324e <vfprintf+0x3aa>
    3102:	04 c0       	rjmp	.+8      	; 0x310c <vfprintf+0x268>
    3104:	28 e0       	ldi	r18, 0x08	; 8
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	0a c0       	rjmp	.+20     	; 0x311e <vfprintf+0x27a>
    310a:	10 61       	ori	r17, 0x10	; 16
    310c:	14 fd       	sbrc	r17, 4
    310e:	14 60       	ori	r17, 0x04	; 4
    3110:	20 e1       	ldi	r18, 0x10	; 16
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	04 c0       	rjmp	.+8      	; 0x311e <vfprintf+0x27a>
    3116:	14 fd       	sbrc	r17, 4
    3118:	16 60       	ori	r17, 0x06	; 6
    311a:	20 e1       	ldi	r18, 0x10	; 16
    311c:	32 e0       	ldi	r19, 0x02	; 2
    311e:	17 ff       	sbrs	r17, 7
    3120:	08 c0       	rjmp	.+16     	; 0x3132 <vfprintf+0x28e>
    3122:	f5 01       	movw	r30, r10
    3124:	60 81       	ld	r22, Z
    3126:	71 81       	ldd	r23, Z+1	; 0x01
    3128:	82 81       	ldd	r24, Z+2	; 0x02
    312a:	93 81       	ldd	r25, Z+3	; 0x03
    312c:	44 e0       	ldi	r20, 0x04	; 4
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	08 c0       	rjmp	.+16     	; 0x3142 <vfprintf+0x29e>
    3132:	f5 01       	movw	r30, r10
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	bc 01       	movw	r22, r24
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	42 e0       	ldi	r20, 0x02	; 2
    3140:	50 e0       	ldi	r21, 0x00	; 0
    3142:	a4 0e       	add	r10, r20
    3144:	b5 1e       	adc	r11, r21
    3146:	a1 01       	movw	r20, r2
    3148:	0e 94 81 19 	call	0x3302	; 0x3302 <__ultoa_invert>
    314c:	d8 2e       	mov	r13, r24
    314e:	d2 18       	sub	r13, r2
    3150:	8f e7       	ldi	r24, 0x7F	; 127
    3152:	f8 2e       	mov	r15, r24
    3154:	f1 22       	and	r15, r17
    3156:	f6 fe       	sbrs	r15, 6
    3158:	0b c0       	rjmp	.+22     	; 0x3170 <vfprintf+0x2cc>
    315a:	5e ef       	ldi	r21, 0xFE	; 254
    315c:	f5 22       	and	r15, r21
    315e:	d9 14       	cp	r13, r9
    3160:	38 f4       	brcc	.+14     	; 0x3170 <vfprintf+0x2cc>
    3162:	f4 fe       	sbrs	r15, 4
    3164:	07 c0       	rjmp	.+14     	; 0x3174 <vfprintf+0x2d0>
    3166:	f2 fc       	sbrc	r15, 2
    3168:	05 c0       	rjmp	.+10     	; 0x3174 <vfprintf+0x2d0>
    316a:	8f ee       	ldi	r24, 0xEF	; 239
    316c:	f8 22       	and	r15, r24
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <vfprintf+0x2d0>
    3170:	1d 2d       	mov	r17, r13
    3172:	01 c0       	rjmp	.+2      	; 0x3176 <vfprintf+0x2d2>
    3174:	19 2d       	mov	r17, r9
    3176:	f4 fe       	sbrs	r15, 4
    3178:	0d c0       	rjmp	.+26     	; 0x3194 <vfprintf+0x2f0>
    317a:	fe 01       	movw	r30, r28
    317c:	ed 0d       	add	r30, r13
    317e:	f1 1d       	adc	r31, r1
    3180:	80 81       	ld	r24, Z
    3182:	80 33       	cpi	r24, 0x30	; 48
    3184:	19 f4       	brne	.+6      	; 0x318c <vfprintf+0x2e8>
    3186:	99 ee       	ldi	r25, 0xE9	; 233
    3188:	f9 22       	and	r15, r25
    318a:	08 c0       	rjmp	.+16     	; 0x319c <vfprintf+0x2f8>
    318c:	1f 5f       	subi	r17, 0xFF	; 255
    318e:	f2 fe       	sbrs	r15, 2
    3190:	05 c0       	rjmp	.+10     	; 0x319c <vfprintf+0x2f8>
    3192:	03 c0       	rjmp	.+6      	; 0x319a <vfprintf+0x2f6>
    3194:	8f 2d       	mov	r24, r15
    3196:	86 78       	andi	r24, 0x86	; 134
    3198:	09 f0       	breq	.+2      	; 0x319c <vfprintf+0x2f8>
    319a:	1f 5f       	subi	r17, 0xFF	; 255
    319c:	0f 2d       	mov	r16, r15
    319e:	f3 fc       	sbrc	r15, 3
    31a0:	14 c0       	rjmp	.+40     	; 0x31ca <vfprintf+0x326>
    31a2:	f0 fe       	sbrs	r15, 0
    31a4:	0f c0       	rjmp	.+30     	; 0x31c4 <vfprintf+0x320>
    31a6:	1e 15       	cp	r17, r14
    31a8:	10 f0       	brcs	.+4      	; 0x31ae <vfprintf+0x30a>
    31aa:	9d 2c       	mov	r9, r13
    31ac:	0b c0       	rjmp	.+22     	; 0x31c4 <vfprintf+0x320>
    31ae:	9d 2c       	mov	r9, r13
    31b0:	9e 0c       	add	r9, r14
    31b2:	91 1a       	sub	r9, r17
    31b4:	1e 2d       	mov	r17, r14
    31b6:	06 c0       	rjmp	.+12     	; 0x31c4 <vfprintf+0x320>
    31b8:	80 e2       	ldi	r24, 0x20	; 32
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	b3 01       	movw	r22, r6
    31be:	0e 94 55 19 	call	0x32aa	; 0x32aa <fputc>
    31c2:	1f 5f       	subi	r17, 0xFF	; 255
    31c4:	1e 15       	cp	r17, r14
    31c6:	c0 f3       	brcs	.-16     	; 0x31b8 <vfprintf+0x314>
    31c8:	04 c0       	rjmp	.+8      	; 0x31d2 <vfprintf+0x32e>
    31ca:	1e 15       	cp	r17, r14
    31cc:	10 f4       	brcc	.+4      	; 0x31d2 <vfprintf+0x32e>
    31ce:	e1 1a       	sub	r14, r17
    31d0:	01 c0       	rjmp	.+2      	; 0x31d4 <vfprintf+0x330>
    31d2:	ee 24       	eor	r14, r14
    31d4:	04 ff       	sbrs	r16, 4
    31d6:	0f c0       	rjmp	.+30     	; 0x31f6 <vfprintf+0x352>
    31d8:	80 e3       	ldi	r24, 0x30	; 48
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	b3 01       	movw	r22, r6
    31de:	0e 94 55 19 	call	0x32aa	; 0x32aa <fputc>
    31e2:	02 ff       	sbrs	r16, 2
    31e4:	1d c0       	rjmp	.+58     	; 0x3220 <vfprintf+0x37c>
    31e6:	01 fd       	sbrc	r16, 1
    31e8:	03 c0       	rjmp	.+6      	; 0x31f0 <vfprintf+0x34c>
    31ea:	88 e7       	ldi	r24, 0x78	; 120
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0e c0       	rjmp	.+28     	; 0x320c <vfprintf+0x368>
    31f0:	88 e5       	ldi	r24, 0x58	; 88
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0b c0       	rjmp	.+22     	; 0x320c <vfprintf+0x368>
    31f6:	80 2f       	mov	r24, r16
    31f8:	86 78       	andi	r24, 0x86	; 134
    31fa:	91 f0       	breq	.+36     	; 0x3220 <vfprintf+0x37c>
    31fc:	01 ff       	sbrs	r16, 1
    31fe:	02 c0       	rjmp	.+4      	; 0x3204 <vfprintf+0x360>
    3200:	8b e2       	ldi	r24, 0x2B	; 43
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <vfprintf+0x362>
    3204:	80 e2       	ldi	r24, 0x20	; 32
    3206:	f7 fc       	sbrc	r15, 7
    3208:	8d e2       	ldi	r24, 0x2D	; 45
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	b3 01       	movw	r22, r6
    320e:	0e 94 55 19 	call	0x32aa	; 0x32aa <fputc>
    3212:	06 c0       	rjmp	.+12     	; 0x3220 <vfprintf+0x37c>
    3214:	80 e3       	ldi	r24, 0x30	; 48
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	b3 01       	movw	r22, r6
    321a:	0e 94 55 19 	call	0x32aa	; 0x32aa <fputc>
    321e:	9a 94       	dec	r9
    3220:	d9 14       	cp	r13, r9
    3222:	c0 f3       	brcs	.-16     	; 0x3214 <vfprintf+0x370>
    3224:	da 94       	dec	r13
    3226:	f1 01       	movw	r30, r2
    3228:	ed 0d       	add	r30, r13
    322a:	f1 1d       	adc	r31, r1
    322c:	80 81       	ld	r24, Z
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	b3 01       	movw	r22, r6
    3232:	0e 94 55 19 	call	0x32aa	; 0x32aa <fputc>
    3236:	dd 20       	and	r13, r13
    3238:	a9 f7       	brne	.-22     	; 0x3224 <vfprintf+0x380>
    323a:	06 c0       	rjmp	.+12     	; 0x3248 <vfprintf+0x3a4>
    323c:	80 e2       	ldi	r24, 0x20	; 32
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	b3 01       	movw	r22, r6
    3242:	0e 94 55 19 	call	0x32aa	; 0x32aa <fputc>
    3246:	ea 94       	dec	r14
    3248:	ee 20       	and	r14, r14
    324a:	c1 f7       	brne	.-16     	; 0x323c <vfprintf+0x398>
    324c:	43 ce       	rjmp	.-890    	; 0x2ed4 <vfprintf+0x30>
    324e:	f3 01       	movw	r30, r6
    3250:	66 81       	ldd	r22, Z+6	; 0x06
    3252:	77 81       	ldd	r23, Z+7	; 0x07
    3254:	cb 01       	movw	r24, r22
    3256:	2b 96       	adiw	r28, 0x0b	; 11
    3258:	e2 e1       	ldi	r30, 0x12	; 18
    325a:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__>

0000325e <strnlen_P>:
    325e:	fc 01       	movw	r30, r24
    3260:	05 90       	lpm	r0, Z+
    3262:	61 50       	subi	r22, 0x01	; 1
    3264:	70 40       	sbci	r23, 0x00	; 0
    3266:	01 10       	cpse	r0, r1
    3268:	d8 f7       	brcc	.-10     	; 0x3260 <strnlen_P+0x2>
    326a:	80 95       	com	r24
    326c:	90 95       	com	r25
    326e:	8e 0f       	add	r24, r30
    3270:	9f 1f       	adc	r25, r31
    3272:	08 95       	ret

00003274 <strnlen>:
    3274:	fc 01       	movw	r30, r24
    3276:	61 50       	subi	r22, 0x01	; 1
    3278:	70 40       	sbci	r23, 0x00	; 0
    327a:	01 90       	ld	r0, Z+
    327c:	01 10       	cpse	r0, r1
    327e:	d8 f7       	brcc	.-10     	; 0x3276 <strnlen+0x2>
    3280:	80 95       	com	r24
    3282:	90 95       	com	r25
    3284:	8e 0f       	add	r24, r30
    3286:	9f 1f       	adc	r25, r31
    3288:	08 95       	ret

0000328a <strrev>:
    328a:	dc 01       	movw	r26, r24
    328c:	fc 01       	movw	r30, r24
    328e:	67 2f       	mov	r22, r23
    3290:	71 91       	ld	r23, Z+
    3292:	77 23       	and	r23, r23
    3294:	e1 f7       	brne	.-8      	; 0x328e <strrev+0x4>
    3296:	32 97       	sbiw	r30, 0x02	; 2
    3298:	04 c0       	rjmp	.+8      	; 0x32a2 <strrev+0x18>
    329a:	7c 91       	ld	r23, X
    329c:	6d 93       	st	X+, r22
    329e:	70 83       	st	Z, r23
    32a0:	62 91       	ld	r22, -Z
    32a2:	ae 17       	cp	r26, r30
    32a4:	bf 07       	cpc	r27, r31
    32a6:	c8 f3       	brcs	.-14     	; 0x329a <strrev+0x10>
    32a8:	08 95       	ret

000032aa <fputc>:
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	8c 01       	movw	r16, r24
    32b4:	eb 01       	movw	r28, r22
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	81 ff       	sbrs	r24, 1
    32ba:	1b c0       	rjmp	.+54     	; 0x32f2 <fputc+0x48>
    32bc:	82 ff       	sbrs	r24, 2
    32be:	0d c0       	rjmp	.+26     	; 0x32da <fputc+0x30>
    32c0:	2e 81       	ldd	r18, Y+6	; 0x06
    32c2:	3f 81       	ldd	r19, Y+7	; 0x07
    32c4:	8c 81       	ldd	r24, Y+4	; 0x04
    32c6:	9d 81       	ldd	r25, Y+5	; 0x05
    32c8:	28 17       	cp	r18, r24
    32ca:	39 07       	cpc	r19, r25
    32cc:	64 f4       	brge	.+24     	; 0x32e6 <fputc+0x3c>
    32ce:	e8 81       	ld	r30, Y
    32d0:	f9 81       	ldd	r31, Y+1	; 0x01
    32d2:	01 93       	st	Z+, r16
    32d4:	f9 83       	std	Y+1, r31	; 0x01
    32d6:	e8 83       	st	Y, r30
    32d8:	06 c0       	rjmp	.+12     	; 0x32e6 <fputc+0x3c>
    32da:	e8 85       	ldd	r30, Y+8	; 0x08
    32dc:	f9 85       	ldd	r31, Y+9	; 0x09
    32de:	80 2f       	mov	r24, r16
    32e0:	09 95       	icall
    32e2:	89 2b       	or	r24, r25
    32e4:	31 f4       	brne	.+12     	; 0x32f2 <fputc+0x48>
    32e6:	8e 81       	ldd	r24, Y+6	; 0x06
    32e8:	9f 81       	ldd	r25, Y+7	; 0x07
    32ea:	01 96       	adiw	r24, 0x01	; 1
    32ec:	9f 83       	std	Y+7, r25	; 0x07
    32ee:	8e 83       	std	Y+6, r24	; 0x06
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <fputc+0x4c>
    32f2:	0f ef       	ldi	r16, 0xFF	; 255
    32f4:	1f ef       	ldi	r17, 0xFF	; 255
    32f6:	c8 01       	movw	r24, r16
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	08 95       	ret

00003302 <__ultoa_invert>:
    3302:	fa 01       	movw	r30, r20
    3304:	aa 27       	eor	r26, r26
    3306:	28 30       	cpi	r18, 0x08	; 8
    3308:	51 f1       	breq	.+84     	; 0x335e <__ultoa_invert+0x5c>
    330a:	20 31       	cpi	r18, 0x10	; 16
    330c:	81 f1       	breq	.+96     	; 0x336e <__ultoa_invert+0x6c>
    330e:	e8 94       	clt
    3310:	6f 93       	push	r22
    3312:	6e 7f       	andi	r22, 0xFE	; 254
    3314:	6e 5f       	subi	r22, 0xFE	; 254
    3316:	7f 4f       	sbci	r23, 0xFF	; 255
    3318:	8f 4f       	sbci	r24, 0xFF	; 255
    331a:	9f 4f       	sbci	r25, 0xFF	; 255
    331c:	af 4f       	sbci	r26, 0xFF	; 255
    331e:	b1 e0       	ldi	r27, 0x01	; 1
    3320:	3e d0       	rcall	.+124    	; 0x339e <__ultoa_invert+0x9c>
    3322:	b4 e0       	ldi	r27, 0x04	; 4
    3324:	3c d0       	rcall	.+120    	; 0x339e <__ultoa_invert+0x9c>
    3326:	67 0f       	add	r22, r23
    3328:	78 1f       	adc	r23, r24
    332a:	89 1f       	adc	r24, r25
    332c:	9a 1f       	adc	r25, r26
    332e:	a1 1d       	adc	r26, r1
    3330:	68 0f       	add	r22, r24
    3332:	79 1f       	adc	r23, r25
    3334:	8a 1f       	adc	r24, r26
    3336:	91 1d       	adc	r25, r1
    3338:	a1 1d       	adc	r26, r1
    333a:	6a 0f       	add	r22, r26
    333c:	71 1d       	adc	r23, r1
    333e:	81 1d       	adc	r24, r1
    3340:	91 1d       	adc	r25, r1
    3342:	a1 1d       	adc	r26, r1
    3344:	20 d0       	rcall	.+64     	; 0x3386 <__ultoa_invert+0x84>
    3346:	09 f4       	brne	.+2      	; 0x334a <__ultoa_invert+0x48>
    3348:	68 94       	set
    334a:	3f 91       	pop	r19
    334c:	2a e0       	ldi	r18, 0x0A	; 10
    334e:	26 9f       	mul	r18, r22
    3350:	11 24       	eor	r1, r1
    3352:	30 19       	sub	r19, r0
    3354:	30 5d       	subi	r19, 0xD0	; 208
    3356:	31 93       	st	Z+, r19
    3358:	de f6       	brtc	.-74     	; 0x3310 <__ultoa_invert+0xe>
    335a:	cf 01       	movw	r24, r30
    335c:	08 95       	ret
    335e:	46 2f       	mov	r20, r22
    3360:	47 70       	andi	r20, 0x07	; 7
    3362:	40 5d       	subi	r20, 0xD0	; 208
    3364:	41 93       	st	Z+, r20
    3366:	b3 e0       	ldi	r27, 0x03	; 3
    3368:	0f d0       	rcall	.+30     	; 0x3388 <__ultoa_invert+0x86>
    336a:	c9 f7       	brne	.-14     	; 0x335e <__ultoa_invert+0x5c>
    336c:	f6 cf       	rjmp	.-20     	; 0x335a <__ultoa_invert+0x58>
    336e:	46 2f       	mov	r20, r22
    3370:	4f 70       	andi	r20, 0x0F	; 15
    3372:	40 5d       	subi	r20, 0xD0	; 208
    3374:	4a 33       	cpi	r20, 0x3A	; 58
    3376:	18 f0       	brcs	.+6      	; 0x337e <__ultoa_invert+0x7c>
    3378:	49 5d       	subi	r20, 0xD9	; 217
    337a:	31 fd       	sbrc	r19, 1
    337c:	40 52       	subi	r20, 0x20	; 32
    337e:	41 93       	st	Z+, r20
    3380:	02 d0       	rcall	.+4      	; 0x3386 <__ultoa_invert+0x84>
    3382:	a9 f7       	brne	.-22     	; 0x336e <__ultoa_invert+0x6c>
    3384:	ea cf       	rjmp	.-44     	; 0x335a <__ultoa_invert+0x58>
    3386:	b4 e0       	ldi	r27, 0x04	; 4
    3388:	a6 95       	lsr	r26
    338a:	97 95       	ror	r25
    338c:	87 95       	ror	r24
    338e:	77 95       	ror	r23
    3390:	67 95       	ror	r22
    3392:	ba 95       	dec	r27
    3394:	c9 f7       	brne	.-14     	; 0x3388 <__ultoa_invert+0x86>
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	61 05       	cpc	r22, r1
    339a:	71 05       	cpc	r23, r1
    339c:	08 95       	ret
    339e:	9b 01       	movw	r18, r22
    33a0:	ac 01       	movw	r20, r24
    33a2:	0a 2e       	mov	r0, r26
    33a4:	06 94       	lsr	r0
    33a6:	57 95       	ror	r21
    33a8:	47 95       	ror	r20
    33aa:	37 95       	ror	r19
    33ac:	27 95       	ror	r18
    33ae:	ba 95       	dec	r27
    33b0:	c9 f7       	brne	.-14     	; 0x33a4 <__ultoa_invert+0xa2>
    33b2:	62 0f       	add	r22, r18
    33b4:	73 1f       	adc	r23, r19
    33b6:	84 1f       	adc	r24, r20
    33b8:	95 1f       	adc	r25, r21
    33ba:	a0 1d       	adc	r26, r0
    33bc:	08 95       	ret

000033be <_exit>:
    33be:	f8 94       	cli

000033c0 <__stop_program>:
    33c0:	ff cf       	rjmp	.-2      	; 0x33c0 <__stop_program>
